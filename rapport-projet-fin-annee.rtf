{\rtf1\ansi\deff0
{\fonttbl{\f0 Times New Roman;}{\f1 Courier New;}}
{\colortbl;\red0\green0\blue0;\red26\green35\blue126;}
\paperw11906\paperh16838\margl1440\margr1440\margt1440\margb1440
\fs22
\page\par\b\fs32 Rapport de Projet de Fin d'Année\b0\fs22\par\par\par\par\b\fs28 Gestionnaire AWS S3 avec Kubernetes, Jenkins et Next.js\b0\fs22\par\par\par---\par\par\b Auteur:\b0 Ingénieur DevOps  \par\b Date:\b0 Décembre 2024  \par\b Entreprise:\b0 [Nom de l'entreprise]  \par\b Département:\b0 Infrastructure et Développement\par\par---\par\par\page\par\b\fs32 Table des Matières\b0\fs22\par\par\par1. [Résumé Exécutif](#résumé-exécutif)\par2. [Introduction](#introduction)\par3. [Architecture Globale du Projet](#architecture-globale-du-projet)\par4. [Technologies Utilisées](#technologies-utilisées)\par   - 4.1 [Amazon Web Services (AWS)](#amazon-web-services-aws)\par   - 4.2 [Kubernetes (K8s)](#kubernetes-k8s)\par   - 4.3 [Jenkins CI/CD](#jenkins-cicd)\par   - 4.4 [Next.js et React](#nextjs-et-react)\par5. [Infrastructure Cloud AWS](#infrastructure-cloud-aws)\par6. [Orchestration avec Kubernetes](#orchestration-avec-kubernetes)\par7. [Pipeline CI/CD avec Jenkins](#pipeline-cicd-avec-jenkins)\par8. [Développement Frontend avec Next.js](#développement-frontend-avec-nextjs)\par9. [Sécurité et Bonnes Pratiques](#sécurité-et-bonnes-pratiques)\par10. [Performances et Optimisations](#performances-et-optimisations)\par11. [Monitoring et Observabilité](#monitoring-et-observabilité)\par12. [Défis Rencontrés et Solutions](#défis-rencontrés-et-solutions)\par13. [Résultats et Métriques](#résultats-et-métriques)\par14. [Perspectives d'Évolution](#perspectives-dévolution)\par15. [Conclusion](#conclusion)\par16. [Annexes](#annexes)\par\par---\par\par\page\par\b\fs32 1. Résumé Exécutif\b0\fs22\par\par\parCe rapport présente le développement et le déploiement d'une application de gestion de fichiers AWS S3 utilisant une architecture cloud-native moderne. Le projet intègre les technologies de pointe telles que Kubernetes pour l'orchestration des conteneurs, Jenkins pour l'intégration et le déploiement continus, AWS pour l'infrastructure cloud, et Next.js pour l'interface utilisateur.\par\par\par\b\fs28 Points Clés du Projet\b0\fs22\par\par\par- \b Objectif Principal:\b0 Créer une plateforme web permettant la gestion complète des fichiers sur AWS S3 avec des notifications en temps réel\par- \b Durée du Projet:\b0 6 mois (Juillet 2024 - Décembre 2024)\par- \b Équipe:\b0 3 développeurs, 1 ingénieur DevOps, 1 architecte cloud\par- \b Budget:\b0 50,000€ (infrastructure et développement)\par- \b ROI Estimé:\b0 Réduction de 40% du temps de gestion des fichiers\par\par\par\b\fs28 Réalisations Principales\b0\fs22\par\par\par1. \b Infrastructure Cloud Robuste:\b0 Déploiement d'une architecture AWS hautement disponible avec S3, SNS, SQS et RDS\par2. \b Orchestration Kubernetes:\b0 Mise en place d'un cluster K8s avec auto-scaling et haute disponibilité\par3. \b Pipeline CI/CD Automatisé:\b0 Implementation d'un pipeline Jenkins complet avec tests, scans de sécurité et déploiements automatiques\par4. \b Interface Utilisateur Moderne:\b0 Application Next.js responsive avec gestion en temps réel des notifications\par\par---\par\par\page\par\b\fs32 2. Introduction\b0\fs22\par\par\par\par\b\fs28 2.1 Contexte du Projet\b0\fs22\par\par\parDans le contexte actuel de transformation digitale, la gestion efficace des données dans le cloud est devenue un enjeu majeur pour les entreprises. Notre organisation gérait précédemment ses fichiers via des interfaces AWS natives, ce qui nécessitait des compétences techniques spécifiques et ralentissait les processus métier.\par\par\par\b\fs28 2.2 Problématique\b0\fs22\par\par\parLes principaux défis identifiés étaient :\par- Complexité de l'interface AWS S3 pour les utilisateurs non techniques\par- Absence de notifications en temps réel lors des modifications de fichiers\par- Manque d'intégration avec les systèmes existants\par- Difficultés de gestion des permissions et de la sécurité\par- Absence de métriques et de suivi des opérations\par\par\par\b\fs28 2.3 Solution Proposée\b0\fs22\par\par\parNous avons conçu une application web moderne qui :\par- Simplifie l'interaction avec AWS S3 via une interface intuitive\par- Fournit des notifications en temps réel via AWS SNS/SQS\par- S'intègre parfaitement dans notre écosystème cloud\par- Offre une gestion granulaire des permissions\par- Inclut un tableau de bord complet avec métriques\par\par---\par\par\page\par\b\fs32 3. Architecture Globale du Projet\b0\fs22\par\par\par\par\b\fs28 3.1 Vue d'Ensemble\b0\fs22\par\par\parL'architecture du projet suit les principes du cloud-native et des microservices, garantissant scalabilité, résilience et maintenabilité.\par\par``\f1 \par┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐\par│   Utilisateurs  │────▶│  Load Balancer  │────▶│  Nginx Ingress  │\par└─────────────────┘     └─────────────────┘     └─────────────────┘\par                                                          │\par                                                          ▼\par                        ┌─────────────────────────────────────────────┐\par                        │            Cluster Kubernetes               │\par                        │  ┌─────────────┐  ┌──────────────────┐    │\par                        │  │  Next.js    │  │   PostgreSQL     │    │\par                        │  │  Pods (3x)  │  │   StatefulSet    │    │\par                        │  └─────────────┘  └──────────────────┘    │\par                        └─────────────────────────────────────────────┘\par                                          │\par                        ┌─────────────────┴─────────────────┐\par                        ▼                                     ▼\par                ┌──────────────┐  ┌──────────────┐  ┌──────────────┐\par                │    AWS S3    │  │   AWS SNS    │  │   AWS SQS    │\par                └──────────────┘  └──────────────┘  └──────────────┘\par\f0`\f1 \par\par\par\b\fs28 3.2 Composants Principaux\b0\fs22\par\par\par\par\b\fs24 3.2.1 Frontend (Next.js)\b0\fs22\par\par- Application React avec rendu côté serveur (SSR)\par- Interface responsive et moderne\par- Gestion d'état avec React Context\par- Communication API REST avec le backend\par\par\par\b\fs24 3.2.2 Backend (Node.js/Next.js API)\b0\fs22\par\par- API Routes Next.js pour les endpoints\par- Intégration AWS SDK pour S3, SNS, SQS\par- Gestion des sessions et authentification\par- Validation des données et gestion des erreurs\par\par\par\b\fs24 3.2.3 Base de Données (PostgreSQL)\b0\fs22\par\par- Stockage des métadonnées utilisateurs\par- Journalisation des opérations\par- Haute disponibilité avec réplication\par- Sauvegardes automatiques quotidiennes\par\par\par\b\fs24 3.2.4 Infrastructure Cloud (AWS)\b0\fs22\par\par- \b S3:\b0 Stockage objet pour les fichiers\par- \b SNS:\b0 Service de notification pour les événements\par- \b SQS:\b0 File d'attente pour le traitement asynchrone\par- \b RDS:\b0 PostgreSQL managé pour la base de données\par\par---\par\par\page\par\b\fs32 4. Technologies Utilisées\b0\fs22\par\par\par\par\b\fs28 4.1 Amazon Web Services (AWS)\b0\fs22\par\par\par\par\b\fs24 4.1.1 AWS S3 (Simple Storage Service)\b0\fs22\par\par\parAWS S3 constitue le cœur de notre solution de stockage. Nous l'avons choisi pour :\par\par\b Avantages:\b0\par- Durabilité de 99.999999999% (11 9's)\par- Scalabilité illimitée\par- Intégration native avec d'autres services AWS\par- Coût optimisé avec différentes classes de stockage\par\par\b Configuration Implementée:\b0\par\f0`\f1 terraform\parresource "aws_s3_bucket" "main" {\par  bucket = "aws-s3-manager-bucket"\par  \par  versioning {\par    enabled = true\par  }\par  \par  lifecycle_rule {\par    enabled = true\par    \par    transition {\par      days          = 30\par      storage_class = "STANDARD_IA"\par    }\par    \par    transition {\par      days          = 60\par      storage_class = "GLACIER"\par    }\par  }\par}\par\f0`\f1 \par\par\par\b\fs24 4.1.2 AWS SNS/SQS\b0\fs22\par\par\parL'architecture événementielle repose sur SNS et SQS pour :\par- Découplage des composants\par- Traitement asynchrone des événements\par- Garantie de livraison des messages\par- Scalabilité automatique\par\par\b Flux d'Événements:\b0\par1. Upload de fichier sur S3\par2. S3 déclenche un événement vers SNS\par3. SNS publie le message vers SQS\par4. L'application consomme les messages SQS\par5. Notification en temps réel vers l'utilisateur\par\par\par\b\fs24 4.1.3 AWS RDS PostgreSQL\b0\fs22\par\par\parBase de données relationnelle managée offrant :\par- Haute disponibilité Multi-AZ\par- Sauvegardes automatiques\par- Mise à jour automatique des patches\par- Monitoring intégré avec CloudWatch\par\par\par\b\fs28 4.2 Kubernetes (K8s)\b0\fs22\par\par\par\par\b\fs24 4.2.1 Architecture Kubernetes\b0\fs22\par\par\parNotre déploiement Kubernetes comprend :\par\par\b Namespace dédié:\b0 \f0aws-s3-manager\f1 \par\par\b Ressources déployées:\b0\par- Deployments (Application, PostgreSQL)\par- Services (ClusterIP, NodePort)\par- ConfigMaps et Secrets\par- HorizontalPodAutoscaler\par- NetworkPolicies\par- Ingress Controllers\par\par\par\b\fs24 4.2.2 Configuration des Deployments\b0\fs22\par\par\par\f0`\f1 yaml\parapiVersion: apps/v1\parkind: Deployment\parmetadata:\par  name: aws-s3-manager\par  namespace: aws-s3-manager\parspec:\par  replicas: 3\par  strategy:\par    type: RollingUpdate\par    rollingUpdate:\par      maxSurge: 1\par      maxUnavailable: 0\par  template:\par    spec:\par      containers:\par      - name: app\par        image: aws-s3-manager:latest\par        resources:\par          requests:\par            memory: "256Mi"\par            cpu: "250m"\par          limits:\par            memory: "1Gi"\par            cpu: "1000m"\par        livenessProbe:\par          httpGet:\par            path: /api/health\par            port: 3000\par          initialDelaySeconds: 30\par          periodSeconds: 10\par        readinessProbe:\par          httpGet:\par            path: /api/health\par            port: 3000\par          initialDelaySeconds: 5\par          periodSeconds: 5\par\f0`\f1 \par\par\par\b\fs24 4.2.3 Auto-scaling et Haute Disponibilité\b0\fs22\par\par\par\b HorizontalPodAutoscaler Configuration:\b0\par- Métrique CPU: Scale à 70% d'utilisation\par- Métrique Mémoire: Scale à 80% d'utilisation\par- Min replicas: 3\par- Max replicas: 10\par\par\b Stratégies de Haute Disponibilité:\b0\par- Distribution des pods sur plusieurs nœuds\par- Pod Disruption Budgets\par- Liveness et Readiness probes\par- Rolling updates sans interruption\par\par\par\b\fs28 4.3 Jenkins CI/CD\b0\fs22\par\par\par\par\b\fs24 4.3.1 Architecture du Pipeline\b0\fs22\par\par\parNotre pipeline Jenkins suit une approche GitOps avec les étapes suivantes :\par\par\f0`\f1 groovy\parpipeline {\par    agent any\par    \par    stages {\par        stage('Checkout') {\par            steps {\par                checkout scm\par            }\par        }\par        \par        stage('Install Dependencies') {\par            steps {\par                sh 'npm ci'\par            }\par        }\par        \par        stage('Quality Gates') {\par            parallel {\par                stage('Lint') {\par                    steps {\par                        sh 'npm run lint'\par                    }\par                }\par                stage('Type Check') {\par                    steps {\par                        sh 'npm run type-check'\par                    }\par                }\par            }\par        }\par        \par        stage('Test') {\par            steps {\par                sh 'npm run test:ci'\par                publishHTML([\par                    allowMissing: false,\par                    alwaysLinkToLastBuild: true,\par                    keepAll: true,\par                    reportDir: 'coverage',\par                    reportFiles: 'index.html',\par                    reportName: 'Coverage Report'\par                ])\par            }\par        }\par        \par        stage('Build') {\par            steps {\par                script {\par                    if (env.BRANCH_NAME == 'main') {\par                        sh 'npm run build:production'\par                    } else {\par                        sh 'npm run build'\par                    }\par                }\par            }\par        }\par        \par        stage('Docker Build') {\par            steps {\par                sh 'docker build -t aws-s3-manager:${BUILD_NUMBER} .'\par            }\par        }\par        \par        stage('Security Scan') {\par            steps {\par                sh 'trivy image --severity HIGH,CRITICAL aws-s3-manager:${BUILD_NUMBER}'\par            }\par        }\par        \par        stage('Deploy') {\par            when {\par                anyOf {\par                    branch 'main'\par                    branch 'develop'\par                }\par            }\par            steps {\par                script {\par                    if (env.BRANCH_NAME == 'develop') {\par                        sh 'kubectl apply -k k8s/environments/staging'\par                    } else if (env.BRANCH_NAME == 'main') {\par                        input message: 'Deploy to production?'\par                        sh 'kubectl apply -k k8s/environments/production'\par                    }\par                }\par            }\par        }\par    }\par    \par    post {\par        always {\par            cleanWs()\par        }\par        success {\par            slackSend(\par                color: 'good',\par                message: "Deployment successful: ${env.JOB_NAME} - ${env.BUILD_NUMBER}"\par            )\par        }\par        failure {\par            slackSend(\par                color: 'danger',\par                message: "Deployment failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}"\par            )\par        }\par    }\par}\par\f0`\f1 \par\par\par\b\fs24 4.3.2 Intégration Continue\b0\fs22\par\par\par\b Stratégies Implementées:\b0\par- Builds déclenchés automatiquement sur push\par- Tests parallèles pour réduire le temps de build\par- Cache des dépendances npm\par- Analyse statique du code\par- Rapports de couverture de tests\par\par\par\b\fs24 4.3.3 Déploiement Continu\b0\fs22\par\par\par\b Environnements:\b0\par- \b Development:\b0 Déploiement automatique sur feature branches\par- \b Staging:\b0 Déploiement automatique sur develop\par- \b Production:\b0 Déploiement manuel avec approbation sur main\par\par\par\b\fs28 4.4 Next.js et React\b0\fs22\par\par\par\par\b\fs24 4.4.1 Architecture Frontend\b0\fs22\par\par\par\b Structure du Projet:\b0\par\f0`\f1 \parsrc/\par├── app/\par│   ├── (auth)/\par│   │   └── login/\par│   ├── (main)/\par│   │   ├── dashboard/\par│   │   ├── upload/\par│   │   └── user-management/\par│   ├── api/\par│   │   ├── delete/\par│   │   ├── list/\par│   │   ├── notifications/\par│   │   ├── upload/\par│   │   └── users/\par│   └── components/\par├── lib/\par│   └── aws/\par├── types/\par└── utils/\par\f0`\f1 \par\par\par\b\fs24 4.4.2 Fonctionnalités Principales\b0\fs22\par\par\par\b 1. Upload de Fichiers:\b0\par- Drag & Drop intuitif\par- Progress bar en temps réel\par- Validation côté client\par- Support multi-fichiers\par- Limite de taille configurable\par\par\b 2. Gestion des Fichiers:\b0\par- Liste paginée avec métadonnées\par- Recherche et filtrage\par- Actions groupées\par- Prévisualisation des images\par- Téléchargement direct depuis S3\par\par\b 3. Notifications en Temps Réel:\b0\par- WebSocket pour les mises à jour live\par- Système de notification toast\par- Historique des événements\par- Filtrage par type d'événement\par\par\par\b\fs24 4.4.3 Optimisations Performance\b0\fs22\par\par\par\b Techniques Utilisées:\b0\par- Server-Side Rendering (SSR) pour le SEO\par- Code splitting automatique\par- Lazy loading des composants\par- Optimisation des images avec next/image\par- Cache API avec SWR\par- Compression gzip/brotli\par\par---\par\par\page\par\b\fs32 5. Infrastructure Cloud AWS\b0\fs22\par\par\par\par\b\fs28 5.1 Architecture AWS Détaillée\b0\fs22\par\par\par\par\b\fs24 5.1.1 Design Patterns Utilisés\b0\fs22\par\par\par\b 1. Multi-Tier Architecture:\b0\par- Séparation claire entre présentation, logique métier et données\par- Isolation réseau avec VPC et subnets privés/publics\par- Security groups restrictifs par couche\par\par\b 2. Event-Driven Architecture:\b0\par- Découplage via SNS/SQS\par- Traitement asynchrone des tâches lourdes\par- Retry automatique avec Dead Letter Queues\par\par\b 3. High Availability:\b0\par- Déploiement Multi-AZ pour RDS\par- S3 avec réplication cross-region\par- Load balancing avec health checks\par\par\par\b\fs24 5.1.2 Configuration Terraform\b0\fs22\par\par\parNotre infrastructure est entièrement codifiée avec Terraform :\par\par\f0`\f1 hcl\par\page\par\b\fs32 VPC Configuration\b0\fs22\par\parresource "aws_vpc" "main" {\par  cidr_block           = "10.0.0.0/16"\par  enable_dns_hostnames = true\par  enable_dns_support   = true\par\par  tags = {\par    Name        = "aws-s3-manager-vpc"\par    Environment = var.environment\par  }\par}\par\par\page\par\b\fs32 Subnets\b0\fs22\par\parresource "aws_subnet" "public" {\par  count                   = 2\par  vpc_id                  = aws_vpc.main.id\par  cidr_block              = "10.0.${count.index + 1}.0/24"\par  availability_zone       = data.aws_availability_zones.available.names[count.index]\par  map_public_ip_on_launch = true\par\par  tags = {\par    Name = "Public-Subnet-${count.index + 1}"\par    Type = "public"\par  }\par}\par\parresource "aws_subnet" "private" {\par  count             = 2\par  vpc_id            = aws_vpc.main.id\par  cidr_block        = "10.0.${count.index + 10}.0/24"\par  availability_zone = data.aws_availability_zones.available.names[count.index]\par\par  tags = {\par    Name = "Private-Subnet-${count.index + 1}"\par    Type = "private"\par  }\par}\par\par\page\par\b\fs32 RDS PostgreSQL\b0\fs22\par\parresource "aws_db_instance" "postgres" {\par  identifier     = "aws-s3-manager-db"\par  engine         = "postgres"\par  engine_version = "15.4"\par  instance_class = "db.t3.micro"\par  \par  allocated_storage     = 20\par  max_allocated_storage = 100\par  storage_encrypted     = true\par  \par  db_name  = "aws_s3_manager"\par  username = "dbadmin"\par  password = random_password.db_password.result\par  \par  vpc_security_group_ids = [aws_security_group.rds.id]\par  db_subnet_group_name   = aws_db_subnet_group.main.name\par  \par  backup_retention_period = 7\par  backup_window          = "03:00-04:00"\par  maintenance_window     = "sun:04:00-sun:05:00"\par  \par  multi_az               = true\par  deletion_protection    = true\par  skip_final_snapshot    = false\par  \par  enabled_cloudwatch_logs_exports = ["postgresql"]\par  \par  tags = {\par    Name        = "aws-s3-manager-db"\par    Environment = var.environment\par  }\par}\par\f0`\f1 \par\par\par\b\fs24 5.1.3 Sécurité AWS\b0\fs22\par\par\par\b 1. IAM Roles et Policies:\b0\par\f0`\f1 json\par{\par  "Version": "2012-10-17",\par  "Statement": [\par    {\par      "Effect": "Allow",\par      "Action": [\par        "s3:PutObject",\par        "s3:GetObject",\par        "s3:DeleteObject",\par        "s3:ListBucket"\par      ],\par      "Resource": [\par        "arn:aws:s3:::aws-s3-manager-bucket/*",\par        "arn:aws:s3:::aws-s3-manager-bucket"\par      ]\par    },\par    {\par      "Effect": "Allow",\par      "Action": [\par        "sns:Publish",\par        "sqs:SendMessage",\par        "sqs:ReceiveMessage",\par        "sqs:DeleteMessage"\par      ],\par      "Resource": [\par        "arn:aws:sns:\i :\i0:s3-events-topic",\par        "arn:aws:sqs:\i :\i0:s3-events-queue"\par      ]\par    }\par  ]\par}\par\f0`\f1 \par\par\b 2. Encryption:\b0\par- S3: SSE-S3 pour tous les objets\par- RDS: Encryption at rest avec KMS\par- Transit: TLS 1.2+ pour toutes les communications\par- Secrets: AWS Secrets Manager pour les credentials\par\par\b 3. Network Security:\b0\par- VPC avec isolation complète\par- NACLs restrictives\par- Security Groups avec least privilege\par- VPC Endpoints pour S3 (pas de transit internet)\par\par\par\b\fs28 5.2 Monitoring et Alerting\b0\fs22\par\par\par\par\b\fs24 5.2.1 CloudWatch Integration\b0\fs22\par\par\par\b Métriques Surveillées:\b0\par- S3: Requests, Errors, Latency\par- RDS: CPU, Memory, Connections, IOPS\par- SNS/SQS: Messages published/received, DLQ messages\par- Custom metrics de l'application\par\par\b Dashboards CloudWatch:\b0\par\f0`\f1 json\par{\par  "widgets": [\par    {\par      "type": "metric",\par      "properties": {\par        "metrics": [\par          ["AWS/S3", "NumberOfObjects", {"stat": "Average"}],\par          [".", "BucketSizeBytes", {"stat": "Sum"}],\par          ["AWS/RDS", "CPUUtilization", {"stat": "Average"}],\par          [".", "DatabaseConnections", {"stat": "Average"}]\par        ],\par        "period": 300,\par        "stat": "Average",\par        "region": "eu-west-1",\par        "title": "Infrastructure Overview"\par      }\par    }\par  ]\par}\par\f0`\f1 \par\par\par\b\fs24 5.2.2 Alerting Strategy\b0\fs22\par\par\par\b Alertes Configurées:\b0\par1. \b Critical:\b0\par   - RDS CPU > 90% pendant 5 minutes\par   - S3 Error rate > 1%\par   - DLQ messages > 0\par\par2. \b Warning:\b0\par   - RDS Storage < 20%\par   - SNS/SQS latency > 1000ms\par   - Budget dépassement > 80%\par\par---\par\par\page\par\b\fs32 6. Orchestration avec Kubernetes\b0\fs22\par\par\par\par\b\fs28 6.1 Architecture Kubernetes Approfondie\b0\fs22\par\par\par\par\b\fs24 6.1.1 Cluster Setup\b0\fs22\par\par\par\b Configuration du Cluster:\b0\par- Version: 1.28\par- Nodes: 3 worker nodes (t3.medium)\par- Network Plugin: Calico\par- Ingress Controller: NGINX\par- Service Mesh: Considéré mais non implémenté (future évolution)\par\par\par\b\fs24 6.1.2 Namespaces et Isolation\b0\fs22\par\par\par\f0`\f1 yaml\parapiVersion: v1\parkind: Namespace\parmetadata:\par  name: aws-s3-manager\par  labels:\par    name: aws-s3-manager\par    environment: production\par\f0`\f1 \par\par\b Resource Quotas:\b0\par\f0`\f1 yaml\parapiVersion: v1\parkind: ResourceQuota\parmetadata:\par  name: compute-quota\par  namespace: aws-s3-manager\parspec:\par  hard:\par    requests.cpu: "10"\par    requests.memory: 20Gi\par    limits.cpu: "20"\par    limits.memory: 40Gi\par    persistentvolumeclaims: "10"\par\f0`\f1 \par\par\par\b\fs24 6.1.3 Deployments Avancés\b0\fs22\par\par\par\b 1. Application Deployment avec Rolling Updates:\b0\par\f0`\f1 yaml\parapiVersion: apps/v1\parkind: Deployment\parmetadata:\par  name: aws-s3-manager\par  namespace: aws-s3-manager\parspec:\par  replicas: 3\par  strategy:\par    type: RollingUpdate\par    rollingUpdate:\par      maxSurge: 1\par      maxUnavailable: 0\par  selector:\par    matchLabels:\par      app: aws-s3-manager\par  template:\par    metadata:\par      labels:\par        app: aws-s3-manager\par        version: v1.0.0\par    spec:\par      affinity:\par        podAntiAffinity:\par          requiredDuringSchedulingIgnoredDuringExecution:\par          - labelSelector:\par              matchExpressions:\par              - key: app\par                operator: In\par                values:\par                - aws-s3-manager\par            topologyKey: kubernetes.io/hostname\par      containers:\par      - name: app\par        image: aws-s3-manager:latest\par        ports:\par        - containerPort: 3000\par          name: http\par        env:\par        - name: NODE_ENV\par          value: "production"\par        envFrom:\par        - configMapRef:\par            name: app-config\par        - secretRef:\par            name: app-secrets\par        resources:\par          requests:\par            memory: "256Mi"\par            cpu: "250m"\par          limits:\par            memory: "1Gi"\par            cpu: "1000m"\par        livenessProbe:\par          httpGet:\par            path: /api/health\par            port: 3000\par          initialDelaySeconds: 30\par          periodSeconds: 10\par          timeoutSeconds: 5\par          failureThreshold: 3\par        readinessProbe:\par          httpGet:\par            path: /api/health\par            port: 3000\par          initialDelaySeconds: 5\par          periodSeconds: 5\par          timeoutSeconds: 3\par        startupProbe:\par          httpGet:\par            path: /api/health\par            port: 3000\par          initialDelaySeconds: 0\par          periodSeconds: 10\par          timeoutSeconds: 3\par          failureThreshold: 30\par        volumeMounts:\par        - name: app-storage\par          mountPath: /app/uploads\par      volumes:\par      - name: app-storage\par        persistentVolumeClaim:\par          claimName: app-pvc\par\f0`\f1 \par\par\b 2. StatefulSet PostgreSQL:\b0\par\f0`\f1 yaml\parapiVersion: apps/v1\parkind: StatefulSet\parmetadata:\par  name: postgres\par  namespace: aws-s3-manager\parspec:\par  serviceName: postgres\par  replicas: 1\par  selector:\par    matchLabels:\par      app: postgres\par  template:\par    metadata:\par      labels:\par        app: postgres\par    spec:\par      containers:\par      - name: postgres\par        image: postgres:15-alpine\par        ports:\par        - containerPort: 5432\par          name: postgres\par        env:\par        - name: POSTGRES_DB\par          value: aws_s3_manager\par        - name: POSTGRES_USER\par          valueFrom:\par            secretKeyRef:\par              name: postgres-secret\par              key: username\par        - name: POSTGRES_PASSWORD\par          valueFrom:\par            secretKeyRef:\par              name: postgres-secret\par              key: password\par        - name: PGDATA\par          value: /var/lib/postgresql/data/pgdata\par        resources:\par          requests:\par            memory: "256Mi"\par            cpu: "250m"\par          limits:\par            memory: "1Gi"\par            cpu: "1000m"\par        volumeMounts:\par        - name: postgres-storage\par          mountPath: /var/lib/postgresql/data\par  volumeClaimTemplates:\par  - metadata:\par      name: postgres-storage\par    spec:\par      accessModes: ["ReadWriteOnce"]\par      storageClassName: "fast-ssd"\par      resources:\par        requests:\par          storage: 10Gi\par\f0`\f1 \par\par\par\b\fs24 6.1.4 Services et Networking\b0\fs22\par\par\par\b 1. Service Configuration:\b0\par\f0`\f1 yaml\parapiVersion: v1\parkind: Service\parmetadata:\par  name: aws-s3-manager-service\par  namespace: aws-s3-manager\par  annotations:\par    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"\parspec:\par  type: ClusterIP\par  selector:\par    app: aws-s3-manager\par  ports:\par  - port: 80\par    targetPort: 3000\par    protocol: TCP\par    name: http\par\f0`\f1 \par\par\b 2. Ingress Configuration:\b0\par\f0`\f1 yaml\parapiVersion: networking.k8s.io/v1\parkind: Ingress\parmetadata:\par  name: aws-s3-manager-ingress\par  namespace: aws-s3-manager\par  annotations:\par    kubernetes.io/ingress.class: nginx\par    cert-manager.io/cluster-issuer: letsencrypt-prod\par    nginx.ingress.kubernetes.io/ssl-redirect: "true"\par    nginx.ingress.kubernetes.io/proxy-body-size: "100m"\parspec:\par  tls:\par  - hosts:\par    - s3-manager.example.com\par    secretName: s3-manager-tls\par  rules:\par  - host: s3-manager.example.com\par    http:\par      paths:\par      - path: /\par        pathType: Prefix\par        backend:\par          service:\par            name: aws-s3-manager-service\par            port:\par              number: 80\par\f0`\f1 \par\par\par\b\fs24 6.1.5 Auto-scaling Configuration\b0\fs22\par\par\par\b HorizontalPodAutoscaler:\b0\par\f0`\f1 yaml\parapiVersion: autoscaling/v2\parkind: HorizontalPodAutoscaler\parmetadata:\par  name: aws-s3-manager-hpa\par  namespace: aws-s3-manager\parspec:\par  scaleTargetRef:\par    apiVersion: apps/v1\par    kind: Deployment\par    name: aws-s3-manager\par  minReplicas: 3\par  maxReplicas: 10\par  metrics:\par  - type: Resource\par    resource:\par      name: cpu\par      target:\par        type: Utilization\par        averageUtilization: 70\par  - type: Resource\par    resource:\par      name: memory\par      target:\par        type: Utilization\par        averageUtilization: 80\par  behavior:\par    scaleDown:\par      stabilizationWindowSeconds: 300\par      policies:\par      - type: Percent\par        value: 10\par        periodSeconds: 60\par    scaleUp:\par      stabilizationWindowSeconds: 0\par      policies:\par      - type: Percent\par        value: 100\par        periodSeconds: 15\par      - type: Pods\par        value: 4\par        periodSeconds: 15\par      selectPolicy: Max\par\f0`\f1 \par\par\par\b\fs24 6.1.6 Security Policies\b0\fs22\par\par\par\b 1. NetworkPolicies:\b0\par\f0`\f1 yaml\parapiVersion: networking.k8s.io/v1\parkind: NetworkPolicy\parmetadata:\par  name: aws-s3-manager-netpol\par  namespace: aws-s3-manager\parspec:\par  podSelector:\par    matchLabels:\par      app: aws-s3-manager\par  policyTypes:\par  - Ingress\par  - Egress\par  ingress:\par  - from:\par    - namespaceSelector:\par        matchLabels:\par          name: ingress-nginx\par    - podSelector:\par        matchLabels:\par          app: aws-s3-manager\par    ports:\par    - protocol: TCP\par      port: 3000\par  egress:\par  - to:\par    - podSelector:\par        matchLabels:\par          app: postgres\par    ports:\par    - protocol: TCP\par      port: 5432\par  - to:\par    - namespaceSelector: {}\par    ports:\par    - protocol: TCP\par      port: 443\par    - protocol: TCP\par      port: 53\par    - protocol: UDP\par      port: 53\par\f0`\f1 \par\par\b 2. RBAC Configuration:\b0\par\f0`\f1 yaml\parapiVersion: rbac.authorization.k8s.io/v1\parkind: Role\parmetadata:\par  name: aws-s3-manager-role\par  namespace: aws-s3-manager\parrules:\par- apiGroups: [""]\par  resources: ["pods", "services", "configmaps", "secrets"]\par  verbs: ["get", "list", "watch"]\par- apiGroups: ["apps"]\par  resources: ["deployments", "replicasets"]\par  verbs: ["get", "list", "watch"]\par\par---\parapiVersion: rbac.authorization.k8s.io/v1\parkind: RoleBinding\parmetadata:\par  name: aws-s3-manager-rolebinding\par  namespace: aws-s3-manager\parroleRef:\par  apiGroup: rbac.authorization.k8s.io\par  kind: Role\par  name: aws-s3-manager-role\parsubjects:\par- kind: ServiceAccount\par  name: aws-s3-manager-sa\par  namespace: aws-s3-manager\par\f0`\f1 \par\par---\par\par\page\par\b\fs32 7. Pipeline CI/CD avec Jenkins\b0\fs22\par\par\par\par\b\fs28 7.1 Architecture CI/CD Complète\b0\fs22\par\par\par\par\b\fs24 7.1.1 Infrastructure Jenkins\b0\fs22\par\par\par\b Setup Jenkins:\b0\par- Version: 2.426.1 LTS\par- Plugins essentiels:\par  - Pipeline\par  - Blue Ocean\par  - Kubernetes Plugin\par  - Docker Pipeline\par  - Slack Notification\par  - SonarQube Scanner\par  - OWASP Dependency Check\par\par\b Configuration as Code:\b0\par\f0`\f1 yaml\parjenkins:\par  systemMessage: "AWS S3 Manager CI/CD Pipeline"\par  numExecutors: 0\par  mode: EXCLUSIVE\par  \par  clouds:\par  - kubernetes:\par      name: "kubernetes"\par      namespace: "jenkins"\par      jenkinsUrl: "http://jenkins:8080"\par      containerCapStr: "10"\par      templates:\par      - name: "jenkins-agent"\par        label: "jenkins-agent"\par        nodeUsageMode: EXCLUSIVE\par        containers:\par        - name: "jnlp"\par          image: "jenkins/inbound-agent:latest"\par          resourceRequestCpu: "500m"\par          resourceRequestMemory: "512Mi"\par          resourceLimitCpu: "1000m"\par          resourceLimitMemory: "1Gi"\par        - name: "docker"\par          image: "docker:dind"\par          privileged: true\par          resourceRequestCpu: "500m"\par          resourceRequestMemory: "512Mi"\par        - name: "kubectl"\par          image: "bitnami/kubectl:latest"\par          command: "cat"\par          ttyEnabled: true\par        - name: "node"\par          image: "node:18-alpine"\par          command: "cat"\par          ttyEnabled: true\par\f0`\f1 \par\par\par\b\fs24 7.1.2 Pipeline Détaillé\b0\fs22\par\par\par\b Jenkinsfile Complet:\b0\par\f0`\f1 groovy\par@Library('shared-library') _\par\parpipeline {\par    agent {\par        kubernetes {\par            label 'jenkins-agent'\par            defaultContainer 'jnlp'\par        }\par    }\par    \par    environment {\par        DOCKER_REGISTRY = 'registry.example.com'\par        DOCKER_IMAGE = 'aws-s3-manager'\par        SONAR_HOST = 'https://sonar.example.com'\par        SLACK_CHANNEL = '#deployments'\par    }\par    \par    options {\par        buildDiscarder(logRotator(numToKeepStr: '10'))\par        timestamps()\par        timeout(time: 30, unit: 'MINUTES')\par        disableConcurrentBuilds()\par    }\par    \par    stages {\par        stage('Checkout') {\par            steps {\par                checkout scm\par                script {\par                    env.GIT_COMMIT_SHORT = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()\par                    env.GIT_BRANCH = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()\par                }\par            }\par        }\par        \par        stage('Setup') {\par            steps {\par                container('node') {\par                    sh '''\par                        echo "Node version: $(node --version)"\par                        echo "NPM version: $(npm --version)"\par                        npm ci\par                    '''\par                }\par            }\par        }\par        \par        stage('Quality Gates') {\par            parallel {\par                stage('Lint') {\par                    steps {\par                        container('node') {\par                            sh 'npm run lint -- --format json --output-file eslint-report.json || true'\par                            recordIssues(\par                                enabledForFailure: true,\par                                tool: esLint(pattern: 'eslint-report.json'),\par                                qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]]\par                            )\par                        }\par                    }\par                }\par                \par                stage('Type Check') {\par                    steps {\par                        container('node') {\par                            sh 'npm run type-check'\par                        }\par                    }\par                }\par                \par                stage('Security Scan') {\par                    steps {\par                        container('node') {\par                            sh 'npm audit --production --audit-level=high'\par                        }\par                    }\par                }\par            }\par        }\par        \par        stage('Test') {\par            steps {\par                container('node') {\par                    sh '''\par                        npm run test:ci -- --coverage --coverageReporters=lcov\par                        npm run test:e2e:ci || true\par                    '''\par                    \par                    publishHTML([\par                        allowMissing: false,\par                        alwaysLinkToLastBuild: true,\par                        keepAll: true,\par                        reportDir: 'coverage/lcov-report',\par                        reportFiles: 'index.html',\par                        reportName: 'Coverage Report',\par                        reportTitles: 'Code Coverage'\par                    ])\par                    \par                    junit 'test-results/\i \i0/*.xml'\par                }\par            }\par        }\par        \par        stage('SonarQube Analysis') {\par            steps {\par                container('node') {\par                    withSonarQubeEnv('SonarQube') {\par                        sh '''\par                            npx sonar-scanner \\par                                -Dsonar.projectKey=aws-s3-manager \\par                                -Dsonar.sources=src \\par                                -Dsonar.tests=tests \\par                                -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \\par                                -Dsonar.exclusions=\b /\i .test.tsx,\b0/\i0.spec.ts\par                        '''\par                    }\par                }\par            }\par        }\par        \par        stage('Quality Gate') {\par            steps {\par                timeout(time: 5, unit: 'MINUTES') {\par                    waitForQualityGate abortPipeline: true\par                }\par            }\par        }\par        \par        stage('Build Application') {\par            steps {\par                container('node') {\par                    script {\par                        if (env.GIT_BRANCH == 'main') {\par                            sh 'npm run build:production'\par                        } else {\par                            sh 'npm run build'\par                        }\par                    }\par                }\par            }\par        }\par        \par        stage('Build Docker Image') {\par            steps {\par                container('docker') {\par                    script {\par                        def imageTag = "${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}"\par                        sh """\par                            docker build \\par                                --build-arg BUILD_NUMBER=${env.BUILD_NUMBER} \\par                                --build-arg GIT_COMMIT=${env.GIT_COMMIT_SHORT} \\par                                -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${imageTag} \\par                                -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest \\par                                .\par                        """\par                    }\par                }\par            }\par        }\par        \par        stage('Scan Docker Image') {\par            steps {\par                container('docker') {\par                    sh '''\par                        trivy image \\par                            --severity HIGH,CRITICAL \\par                            --no-progress \\par                            --format json \\par                            --output trivy-report.json \\par                            ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest\par                    '''\par                    \par                    recordIssues(\par                        enabledForFailure: true,\par                        tool: trivy(pattern: 'trivy-report.json')\par                    )\par                }\par            }\par        }\par        \par        stage('Push Docker Image') {\par            when {\par                anyOf {\par                    branch 'main'\par                    branch 'develop'\par                }\par            }\par            steps {\par                container('docker') {\par                    withCredentials([usernamePassword(\par                        credentialsId: 'docker-registry-credentials',\par                        usernameVariable: 'DOCKER_USER',\par                        passwordVariable: 'DOCKER_PASS'\par                    )]) {\par                        sh '''\par                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin ${DOCKER_REGISTRY}\par                            docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}-${GIT_COMMIT_SHORT}\par                            docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest\par                        '''\par                    }\par                }\par            }\par        }\par        \par        stage('Deploy to Staging') {\par            when {\par                branch 'develop'\par            }\par            steps {\par                container('kubectl') {\par                    withKubeConfig([credentialsId: 'kubeconfig-staging']) {\par                        sh '''\par                            kubectl set image deployment/aws-s3-manager \\par                                app=${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}-${GIT_COMMIT_SHORT} \\par                                -n aws-s3-manager-staging\par                            \par                            kubectl rollout status deployment/aws-s3-manager \\par                                -n aws-s3-manager-staging \\par                                --timeout=5m\par                        '''\par                    }\par                }\par            }\par        }\par        \par        stage('Integration Tests - Staging') {\par            when {\par                branch 'develop'\par            }\par            steps {\par                container('node') {\par                    sh '''\par                        export TEST_URL=https://staging.s3-manager.example.com\par                        npm run test:integration\par                    '''\par                }\par            }\par        }\par        \par        stage('Deploy to Production') {\par            when {\par                branch 'main'\par            }\par            steps {\par                script {\par                    def userInput = input(\par                        message: 'Deploy to Production?',\par                        parameters: [\par                            choice(\par                                name: 'DEPLOYMENT_TYPE',\par                                choices: ['Blue/Green', 'Canary', 'Rolling Update'],\par                                description: 'Select deployment strategy'\par                            ),\par                            string(\par                                name: 'CANARY_PERCENTAGE',\par                                defaultValue: '10',\par                                description: 'Canary deployment percentage (if applicable)'\par                            )\par                        ]\par                    )\par                    \par                    container('kubectl') {\par                        withKubeConfig([credentialsId: 'kubeconfig-production']) {\par                            if (userInput.DEPLOYMENT_TYPE == 'Blue/Green') {\par                                sh '''\par                                    # Blue/Green deployment logic\par                                    kubectl apply -f k8s/blue-green/green-deployment.yaml\par                                    kubectl wait --for=condition=ready pod -l version=green -n aws-s3-manager\par                                    kubectl patch service aws-s3-manager-service -p '{"spec":{"selector":{"version":"green"}}}'\par                                '''\par                            } else if (userInput.DEPLOYMENT_TYPE == 'Canary') {\par                                sh """\par                                    # Canary deployment logic\par                                    kubectl set image deployment/aws-s3-manager-canary \\par                                        app=${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}-${GIT_COMMIT_SHORT} \\par                                        -n aws-s3-manager\par                                    \par                                    kubectl scale deployment aws-s3-manager-canary --replicas=${userInput.CANARY_PERCENTAGE} -n aws-s3-manager\par                                """\par                            } else {\par                                sh '''\par                                    # Rolling update\par                                    kubectl set image deployment/aws-s3-manager \\par                                        app=${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}-${GIT_COMMIT_SHORT} \\par                                        -n aws-s3-manager\par                                    \par                                    kubectl rollout status deployment/aws-s3-manager \\par                                        -n aws-s3-manager \\par                                        --timeout=10m\par                                '''\par                            }\par                        }\par                    }\par                }\par            }\par        }\par        \par        stage('Smoke Tests - Production') {\par            when {\par                branch 'main'\par            }\par            steps {\par                container('node') {\par                    sh '''\par                        export TEST_URL=https://s3-manager.example.com\par                        npm run test:smoke\par                    '''\par                }\par            }\par        }\par    }\par    \par    post {\par        always {\par            cleanWs()\par        }\par        success {\par            slackSend(\par                channel: env.SLACK_CHANNEL,\par                color: 'good',\par                message: """\par                    :white_check_mark: \i Deployment Successful\i0\par                    \i Job:\i0 ${env.JOB_NAME}\par                    \i Build:\i0 ${env.BUILD_NUMBER}\par                    \i Branch:\i0 ${env.GIT_BRANCH}\par                    \i Commit:\i0 ${env.GIT_COMMIT_SHORT}\par                    <${env.BUILD_URL}|View Build>\par                """\par            )\par        }\par        failure {\par            slackSend(\par                channel: env.SLACK_CHANNEL,\par                color: 'danger',\par                message: """\par                    :x: \i Deployment Failed\i0\par                    \i Job:\i0 ${env.JOB_NAME}\par                    \i Build:\i0 ${env.BUILD_NUMBER}\par                    \i Branch:\i0 ${env.GIT_BRANCH}\par                    \i Stage:\i0 ${env.STAGE_NAME}\par                    <${env.BUILD_URL}|View Build>\par                """\par            )\par        }\par        unstable {\par            slackSend(\par                channel: env.SLACK_CHANNEL,\par                color: 'warning',\par                message: """\par                    :warning: \i Build Unstable\i0\par                    \i Job:\i0 ${env.JOB_NAME}\par                    \i Build:\i0 ${env.BUILD_NUMBER}\par                    Quality gates not met\par                    <${env.BUILD_URL}|View Build>\par                """\par            )\par        }\par    }\par}\par\f0`\f1 \par\par---\par\par\page\par\b\fs32 8. Développement Frontend avec Next.js\b0\fs22\par\par\par\par\b\fs28 8.1 Architecture Frontend Détaillée\b0\fs22\par\par\par\par\b\fs24 8.1.1 Structure et Organisation\b0\fs22\par\par\par\b Architecture Modulaire:\b0\par\f0`\f1 \parsrc/\par├── app/\par│   ├── (auth)/              # Routes authentifiées\par│   │   └── login/\par│   │       ├── page.tsx\par│   │       └── login.module.css\par│   ├── (main)/              # Routes principales\par│   │   ├── dashboard/\par│   │   │   ├── page.tsx\par│   │   │   ├── components/\par│   │   │   │   ├── StatsCard.tsx\par│   │   │   │   ├── FileChart.tsx\par│   │   │   │   └── RecentActivity.tsx\par│   │   │   └── dashboard.module.css\par│   │   ├── upload/\par│   │   │   ├── page.tsx\par│   │   │   ├── components/\par│   │   │   │   ├── DropZone.tsx\par│   │   │   │   ├── UploadProgress.tsx\par│   │   │   │   └── FilePreview.tsx\par│   │   │   └── hooks/\par│   │   │       └── useFileUpload.ts\par│   │   └── user-management/\par│   │       ├── page.tsx\par│   │       └── components/\par│   │           ├── UserTable.tsx\par│   │           └── UserForm.tsx\par│   ├── api/                 # API Routes\par│   │   ├── auth/\par│   │   │   └── [...nextauth]/\par│   │   │       └── route.ts\par│   │   ├── upload/\par│   │   │   └── route.ts\par│   │   ├── list/\par│   │   │   └── route.ts\par│   │   └── notifications/\par│   │       └── route.ts\par│   ├── components/          # Composants partagés\par│   │   ├── ui/\par│   │   │   ├── Button.tsx\par│   │   │   ├── Card.tsx\par│   │   │   ├── Modal.tsx\par│   │   │   └── Toast.tsx\par│   │   ├── layout/\par│   │   │   ├── Header.tsx\par│   │   │   ├── Sidebar.tsx\par│   │   │   └── Footer.tsx\par│   │   └── common/\par│   │       ├── Loading.tsx\par│   │       ├── ErrorBoundary.tsx\par│   │       └── SEO.tsx\par│   ├── hooks/              # Custom Hooks\par│   │   ├── useAuth.ts\par│   │   ├── useNotifications.ts\par│   │   ├── useS3Operations.ts\par│   │   └── useWebSocket.ts\par│   ├── lib/                # Utilitaires\par│   │   ├── aws/\par│   │   │   ├── s3Client.ts\par│   │   │   ├── snsClient.ts\par│   │   │   └── sqsClient.ts\par│   │   ├── auth/\par│   │   │   └── authOptions.ts\par│   │   └── utils/\par│   │       ├── formatters.ts\par│   │       ├── validators.ts\par│   │       └── constants.ts\par│   ├── styles/             # Styles globaux\par│   │   ├── globals.css\par│   │   ├── variables.css\par│   │   └── themes/\par│   │       ├── light.css\par│   │       └── dark.css\par│   └── types/              # TypeScript types\par│       ├── api.ts\par│       ├── models.ts\par│       └── global.d.ts\par\f0`\f1 \par\par\par\b\fs24 8.1.2 Composants Principaux\b0\fs22\par\par\par\b 1. Upload Component avec Drag & Drop:\b0\par\f0`\f1 tsx\par'use client';\par\parimport React, { useCallback, useState } from 'react';\parimport { useDropzone } from 'react-dropzone';\parimport { Upload, X, CheckCircle, AlertCircle } from 'lucide-react';\parimport { motion, AnimatePresence } from 'framer-motion';\parimport { useS3Upload } from '@/hooks/useS3Upload';\parimport { formatFileSize } from '@/lib/utils/formatters';\par\parinterface UploadFile extends File {\par  id: string;\par  progress: number;\par  status: 'pending' | 'uploading' | 'success' | 'error';\par  error?: string;\par}\par\parexport default function ModernUpload() {\par  const [files, setFiles] = useState<UploadFile[]>([]);\par  const { uploadFile } = useS3Upload();\par\par  const onDrop = useCallback(async (acceptedFiles: File[]) => {\par    const newFiles = acceptedFiles.map(file => ({\par      ...file,\par      id: Math.random().toString(36).substring(7),\par      progress: 0,\par      status: 'pending' as const\par    }));\par\par    setFiles(prev => [...prev, ...newFiles]);\par\par    for (const file of newFiles) {\par      try {\par        await uploadFile(file, {\par          onProgress: (progress) => {\par            setFiles(prev => prev.map(f => \par              f.id === file.id \par                ? { ...f, progress, status: 'uploading' }\par                : f\par            ));\par          },\par          onSuccess: () => {\par            setFiles(prev => prev.map(f => \par              f.id === file.id \par                ? { ...f, progress: 100, status: 'success' }\par                : f\par            ));\par          },\par          onError: (error) => {\par            setFiles(prev => prev.map(f => \par              f.id === file.id \par                ? { ...f, status: 'error', error: error.message }\par                : f\par            ));\par          }\par        });\par      } catch (error) {\par        console.error('Upload error:', error);\par      }\par    }\par  }, [uploadFile]);\par\par  const { getRootProps, getInputProps, isDragActive } = useDropzone({\par    onDrop,\par    accept: {\par      'image/*': ['.jpeg', '.jpg', '.png', '.gif'],\par      'application/pdf': ['.pdf'],\par      'text/*': ['.txt', '.csv'],\par      'application/json': ['.json']\par    },\par    maxSize: 100 \i  1024 \i0 1024 // 100MB\par  });\par\par  const removeFile = (id: string) => {\par    setFiles(prev => prev.filter(f => f.id !== id));\par  };\par\par  return (\par    <div className="w-full max-w-4xl mx-auto p-6">\par      <div\par        {...getRootProps()}\par        className={\f0\par          relative border-2 border-dashed rounded-lg p-8\par          transition-all duration-200 cursor-pointer\par          ${isDragActive \par            ? 'border-blue-500 bg-blue-50 scale-105' \par            : 'border-gray-300 hover:border-gray-400'\par          }\par        \f1 }\par      >\par        <input {...getInputProps()} />\par        \par        <div className="text-center">\par          <Upload className="mx-auto h-12 w-12 text-gray-400" />\par          <p className="mt-2 text-sm text-gray-600">\par            {isDragActive\par              ? "Déposez les fichiers ici..."\par              : "Glissez et déposez des fichiers ici, ou cliquez pour sélectionner"}\par          </p>\par          <p className="text-xs text-gray-500 mt-1">\par            Taille maximale: 100MB\par          </p>\par        </div>\par      </div>\par\par      <AnimatePresence>\par        {files.length > 0 && (\par          <motion.div\par            initial={{ opacity: 0, y: 20 }}\par            animate={{ opacity: 1, y: 0 }}\par            exit={{ opacity: 0, y: -20 }}\par            className="mt-6 space-y-2"\par          >\par            <h3 className="text-lg font-semibold text-gray-700">\par              Fichiers ({files.length})\par            </h3>\par            \par            {files.map((file) => (\par              <motion.div\par                key={file.id}\par                layout\par                initial={{ opacity: 0, x: -20 }}\par                animate={{ opacity: 1, x: 0 }}\par                exit={{ opacity: 0, x: 20 }}\par                className="bg-white rounded-lg shadow-sm p-4"\par              >\par                <div className="flex items-center justify-between">\par                  <div className="flex-1">\par                    <div className="flex items-center space-x-3">\par                      <div className="flex-shrink-0">\par                        {file.status === 'success' && (\par                          <CheckCircle className="h-5 w-5 text-green-500" />\par                        )}\par                        {file.status === 'error' && (\par                          <AlertCircle className="h-5 w-5 text-red-500" />\par                        )}\par                        {file.status === 'uploading' && (\par                          <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-500" />\par                        )}\par                      </div>\par                      \par                      <div className="flex-1 min-w-0">\par                        <p className="text-sm font-medium text-gray-900 truncate">\par                          {file.name}\par                        </p>\par                        <p className="text-sm text-gray-500">\par                          {formatFileSize(file.size)}\par                        </p>\par                      </div>\par                    </div>\par                    \par                    {file.status === 'uploading' && (\par                      <div className="mt-2">\par                        <div className="bg-gray-200 rounded-full h-2">\par                          <motion.div\par                            className="bg-blue-500 h-2 rounded-full"\par                            initial={{ width: 0 }}\par                            animate={{ width: \f0${file.progress}%\f1  }}\par                            transition={{ duration: 0.3 }}\par                          />\par                        </div>\par                        <p className="text-xs text-gray-500 mt-1">\par                          {file.progress}%\par                        </p>\par                      </div>\par                    )}\par                    \par                    {file.error && (\par                      <p className="text-xs text-red-500 mt-1">\par                        {file.error}\par                      </p>\par                    )}\par                  </div>\par                  \par                  <button\par                    onClick={() => removeFile(file.id)}\par                    className="ml-4 p-1 rounded-full hover:bg-gray-100"\par                  >\par                    <X className="h-4 w-4 text-gray-500" />\par                  </button>\par                </div>\par              </motion.div>\par            ))}\par          </motion.div>\par        )}\par      </AnimatePresence>\par    </div>\par  );\par}\par\f0`\f1 \par\par\b 2. Real-time Notifications Component:\b0\par\f0`\f1 tsx\par'use client';\par\parimport React, { useEffect, useState } from 'react';\parimport { motion, AnimatePresence } from 'framer-motion';\parimport { Bell, X, FileText, Trash, Upload } from 'lucide-react';\parimport { useWebSocket } from '@/hooks/useWebSocket';\parimport { formatDistanceToNow } from 'date-fns';\parimport { fr } from 'date-fns/locale';\par\parinterface Notification {\par  id: string;\par  type: 'upload' | 'delete' | 'error';\par  message: string;\par  timestamp: Date;\par  metadata?: {\par    fileName?: string;\par    fileSize?: number;\par    bucketName?: string;\par  };\par}\par\parexport default function NotificationPanel() {\par  const [notifications, setNotifications] = useState<Notification[]>([]);\par  const [isOpen, setIsOpen] = useState(false);\par  const { messages } = useWebSocket('/api/notifications/ws');\par\par  useEffect(() => {\par    messages.forEach(message => {\par      const notification: Notification = {\par        id: Math.random().toString(36).substring(7),\par        type: message.type,\par        message: message.message,\par        timestamp: new Date(message.timestamp),\par        metadata: message.metadata\par      };\par      \par      setNotifications(prev => [notification, ...prev].slice(0, 50));\par    });\par  }, [messages]);\par\par  const unreadCount = notifications.filter(n => \par    new Date().getTime() - n.timestamp.getTime() < 5 \i  60 \i0 1000\par  ).length;\par\par  const getIcon = (type: string) => {\par    switch (type) {\par      case 'upload':\par        return <Upload className="h-4 w-4" />;\par      case 'delete':\par        return <Trash className="h-4 w-4" />;\par      default:\par        return <FileText className="h-4 w-4" />;\par    }\par  };\par\par  const getColor = (type: string) => {\par    switch (type) {\par      case 'upload':\par        return 'text-green-600 bg-green-100';\par      case 'delete':\par        return 'text-red-600 bg-red-100';\par      default:\par        return 'text-gray-600 bg-gray-100';\par    }\par  };\par\par  return (\par    <>\par      <button\par        onClick={() => setIsOpen(!isOpen)}\par        className="relative p-2 rounded-lg hover:bg-gray-100 transition-colors"\par      >\par        <Bell className="h-6 w-6 text-gray-600" />\par        {unreadCount > 0 && (\par          <span className="absolute -top-1 -right-1 h-5 w-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">\par            {unreadCount}\par          </span>\par        )}\par      </button>\par\par      <AnimatePresence>\par        {isOpen && (\par          <>\par            <motion.div\par              initial={{ opacity: 0 }}\par              animate={{ opacity: 0.5 }}\par              exit={{ opacity: 0 }}\par              className="fixed inset-0 bg-black z-40"\par              onClick={() => setIsOpen(false)}\par            />\par            \par            <motion.div\par              initial={{ opacity: 0, x: 300 }}\par              animate={{ opacity: 1, x: 0 }}\par              exit={{ opacity: 0, x: 300 }}\par              className="fixed right-0 top-0 h-full w-96 bg-white shadow-xl z-50 overflow-hidden"\par            >\par              <div className="flex items-center justify-between p-4 border-b">\par                <h2 className="text-lg font-semibold">Notifications</h2>\par                <button\par                  onClick={() => setIsOpen(false)}\par                  className="p-1 rounded-lg hover:bg-gray-100"\par                >\par                  <X className="h-5 w-5" />\par                </button>\par              </div>\par              \par              <div className="overflow-y-auto h-full pb-20">\par                {notifications.length === 0 ? (\par                  <div className="text-center py-8 text-gray-500">\par                    Aucune notification\par                  </div>\par                ) : (\par                  <div className="divide-y">\par                    {notifications.map((notification) => (\par                      <motion.div\par                        key={notification.id}\par                        initial={{ opacity: 0, y: 20 }}\par                        animate={{ opacity: 1, y: 0 }}\par                        className="p-4 hover:bg-gray-50 transition-colors"\par                      >\par                        <div className="flex items-start space-x-3">\par                          <div className={\f0p-2 rounded-lg ${getColor(notification.type)}\f1 }>\par                            {getIcon(notification.type)}\par                          </div>\par                          \par                          <div className="flex-1 min-w-0">\par                            <p className="text-sm font-medium text-gray-900">\par                              {notification.message}\par                            </p>\par                            \par                            {notification.metadata && (\par                              <div className="mt-1 text-xs text-gray-500">\par                                {notification.metadata.fileName && (\par                                  <p>Fichier: {notification.metadata.fileName}</p>\par                                )}\par                                {notification.metadata.bucketName && (\par                                  <p>Bucket: {notification.metadata.bucketName}</p>\par                                )}\par                              </div>\par                            )}\par                            \par                            <p className="mt-1 text-xs text-gray-400">\par                              {formatDistanceToNow(notification.timestamp, {\par                                addSuffix: true,\par                                locale: fr\par                              })}\par                            </p>\par                          </div>\par                        </div>\par                      </motion.div>\par                    ))}\par                  </div>\par                )}\par              </div>\par            </motion.div>\par          </>\par        )}\par      </AnimatePresence>\par    </>\par  );\par}\par\f0`\f1 \par\par\par\b\fs24 8.1.3 State Management\b0\fs22\par\par\par\b Context API pour la gestion globale:\b0\par\f0`\f1 tsx\par// contexts/AppContext.tsx\parimport React, { createContext, useContext, useReducer, ReactNode } from 'react';\par\parinterface AppState {\par  user: User | null;\par  files: S3File[];\par  notifications: Notification[];\par  isLoading: boolean;\par  error: string | null;\par}\par\partype AppAction =\par  | { type: 'SET_USER'; payload: User | null }\par  | { type: 'SET_FILES'; payload: S3File[] }\par  | { type: 'ADD_FILE'; payload: S3File }\par  | { type: 'REMOVE_FILE'; payload: string }\par  | { type: 'ADD_NOTIFICATION'; payload: Notification }\par  | { type: 'SET_LOADING'; payload: boolean }\par  | { type: 'SET_ERROR'; payload: string | null };\par\parconst AppContext = createContext<{\par  state: AppState;\par  dispatch: React.Dispatch<AppAction>;\par} | undefined>(undefined);\par\parfunction appReducer(state: AppState, action: AppAction): AppState {\par  switch (action.type) {\par    case 'SET_USER':\par      return { ...state, user: action.payload };\par    case 'SET_FILES':\par      return { ...state, files: action.payload };\par    case 'ADD_FILE':\par      return { ...state, files: [...state.files, action.payload] };\par    case 'REMOVE_FILE':\par      return {\par        ...state,\par        files: state.files.filter(file => file.key !== action.payload)\par      };\par    case 'ADD_NOTIFICATION':\par      return {\par        ...state,\par        notifications: [action.payload, ...state.notifications].slice(0, 100)\par      };\par    case 'SET_LOADING':\par      return { ...state, isLoading: action.payload };\par    case 'SET_ERROR':\par      return { ...state, error: action.payload };\par    default:\par      return state;\par  }\par}\par\parexport function AppProvider({ children }: { children: ReactNode }) {\par  const [state, dispatch] = useReducer(appReducer, {\par    user: null,\par    files: [],\par    notifications: [],\par    isLoading: false,\par    error: null\par  });\par\par  return (\par    <AppContext.Provider value={{ state, dispatch }}>\par      {children}\par    </AppContext.Provider>\par  );\par}\par\parexport function useApp() {\par  const context = useContext(AppContext);\par  if (context === undefined) {\par    throw new Error('useApp must be used within an AppProvider');\par  }\par  return context;\par}\par\f0`\f1 \par\par---\par\par\page\par\b\fs32 9. Sécurité et Bonnes Pratiques\b0\fs22\par\par\par\par\b\fs28 9.1 Sécurité Multi-Couches\b0\fs22\par\par\par\par\b\fs24 9.1.1 Sécurité Infrastructure\b0\fs22\par\par\par\b 1. Network Security:\b0\par- Isolation VPC avec subnets privés/publics\par- Security Groups restrictifs (principe du moindre privilège)\par- NACLs pour défense en profondeur\par- VPC Endpoints pour éviter le transit internet\par- WAF pour protection applicative\par\par\b 2. Identity and Access Management:\b0\par\f0`\f1 json\par{\par  "Version": "2012-10-17",\par  "Statement": [\par    {\par      "Sid": "S3BucketAccess",\par      "Effect": "Allow",\par      "Principal": {\par        "AWS": "arn:aws:iam::123456789012:role/aws-s3-manager-role"\par      },\par      "Action": [\par        "s3:GetObject",\par        "s3:PutObject",\par        "s3:DeleteObject"\par      ],\par      "Resource": "arn:aws:s3:::aws-s3-manager-bucket/*",\par      "Condition": {\par        "StringEquals": {\par          "s3:x-amz-server-side-encryption": "AES256"\par        },\par        "IpAddress": {\par          "aws:SourceIp": ["10.0.0.0/16"]\par        }\par      }\par    }\par  ]\par}\par\f0`\f1 \par\par\par\b\fs24 9.1.2 Sécurité Application\b0\fs22\par\par\par\b 1. Authentication & Authorization:\b0\par\f0`\f1 typescript\par// middleware.ts\parimport { NextResponse } from 'next/server';\parimport type { NextRequest } from 'next/server';\parimport { getToken } from 'next-auth/jwt';\par\parexport async function middleware(request: NextRequest) {\par  const token = await getToken({ req: request });\par  const isAuthPage = request.nextUrl.pathname.startsWith('/login');\par  \par  if (!token && !isAuthPage) {\par    return NextResponse.redirect(new URL('/login', request.url));\par  }\par  \par  if (token && isAuthPage) {\par    return NextResponse.redirect(new URL('/dashboard', request.url));\par  }\par  \par  // RBAC Implementation\par  const protectedRoutes = {\par    '/admin': ['admin'],\par    '/user-management': ['admin', 'manager'],\par    '/upload': ['admin', 'manager', 'user']\par  };\par  \par  const path = request.nextUrl.pathname;\par  const requiredRoles = protectedRoutes[path];\par  \par  if (requiredRoles && !requiredRoles.includes(token.role)) {\par    return NextResponse.redirect(new URL('/unauthorized', request.url));\par  }\par  \par  return NextResponse.next();\par}\par\parexport const config = {\par  matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)']\par};\par\f0`\f1 \par\par\b 2. Input Validation:\b0\par\f0`\f1 typescript\par// lib/validators/fileValidator.ts\parimport { z } from 'zod';\par\parconst MAX_FILE_SIZE = 100 \i  1024 \i0 1024; // 100MB\parconst ALLOWED_FILE_TYPES = [\par  'image/jpeg',\par  'image/png',\par  'image/gif',\par  'application/pdf',\par  'text/plain',\par  'application/json'\par];\par\parexport const fileUploadSchema = z.object({\par  file: z\par    .custom<File>()\par    .refine((file) => file.size <= MAX_FILE_SIZE, {\par      message: 'File size must be less than 100MB'\par    })\par    .refine((file) => ALLOWED_FILE_TYPES.includes(file.type), {\par      message: 'File type not allowed'\par    }),\par  metadata: z.object({\par    description: z.string().max(500).optional(),\par    tags: z.array(z.string()).max(10).optional()\par  }).optional()\par});\par\parexport const sanitizeFileName = (fileName: string): string => {\par  return fileName\par    .replace(/[^a-zA-Z0-9.-]/g, '_')\par    .replace(/_{2,}/g, '_')\par    .replace(/^_|_$/g, '');\par};\par\f0`\f1 \par\par\b 3. API Security:\b0\par\f0`\f1 typescript\par// app/api/upload/route.ts\parimport { NextRequest, NextResponse } from 'next/server';\parimport { getServerSession } from 'next-auth';\parimport { authOptions } from '@/lib/auth';\parimport { rateLimiter } from '@/lib/rateLimiter';\parimport { fileUploadSchema } from '@/lib/validators';\parimport crypto from 'crypto';\par\parexport async function POST(request: NextRequest) {\par  try {\par    // Authentication\par    const session = await getServerSession(authOptions);\par    if (!session) {\par      return NextResponse.json(\par        { error: 'Unauthorized' },\par        { status: 401 }\par      );\par    }\par    \par    // Rate Limiting\par    const identifier = session.user.email;\par    const rateLimitResult = await rateLimiter.check(identifier);\par    \par    if (!rateLimitResult.success) {\par      return NextResponse.json(\par        { error: 'Too many requests' },\par        { status: 429 }\par      );\par    }\par    \par    // Parse and validate request\par    const formData = await request.formData();\par    const file = formData.get('file') as File;\par    \par    const validation = fileUploadSchema.safeParse({ file });\par    if (!validation.success) {\par      return NextResponse.json(\par        { error: validation.error.errors },\par        { status: 400 }\par      );\par    }\par    \par    // Generate secure file key\par    const fileExtension = file.name.split('.').pop();\par    const secureFileName = \f0${crypto.randomUUID()}.${fileExtension}\f1 ;\par    \par    // Scan file for malware (integration with ClamAV)\par    const isSafe = await scanFile(file);\par    if (!isSafe) {\par      return NextResponse.json(\par        { error: 'File contains malicious content' },\par        { status: 400 }\par      );\par    }\par    \par    // Upload to S3 with encryption\par    const result = await uploadToS3({\par      file,\par      key: secureFileName,\par      metadata: {\par        uploadedBy: session.user.id,\par        originalName: file.name,\par        uploadedAt: new Date().toISOString()\par      }\par    });\par    \par    // Log activity\par    await logActivity({\par      userId: session.user.id,\par      action: 'FILE_UPLOAD',\par      resource: secureFileName,\par      ip: request.ip,\par      userAgent: request.headers.get('user-agent')\par    });\par    \par    return NextResponse.json({ \par      success: true,\par      file: {\par        key: result.key,\par        url: result.url,\par        size: file.size\par      }\par    });\par    \par  } catch (error) {\par    console.error('Upload error:', error);\par    return NextResponse.json(\par      { error: 'Internal server error' },\par      { status: 500 }\par    );\par  }\par}\par\f0`\f1 \par\par\par\b\fs24 9.1.3 Sécurité DevOps\b0\fs22\par\par\par\b 1. Supply Chain Security:\b0\par\f0`\f1 yaml\par\page\par\b\fs32 .github/workflows/security.yml\b0\fs22\par\parname: Security Checks\par\paron:\par  push:\par    branches: [main, develop]\par  pull_request:\par    branches: [main]\par  schedule:\par    - cron: '0 0 \i  \i0 *'  # Daily security scan\par\parjobs:\par  dependency-check:\par    runs-on: ubuntu-latest\par    steps:\par      - uses: actions/checkout@v3\par      \par      - name: Run Snyk to check for vulnerabilities\par        uses: snyk/actions/node@master\par        env:\par          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\par        with:\par          args: --severity-threshold=high\par      \par      - name: Run npm audit\par        run: |\par          npm audit --production --audit-level=high\par          \par      - name: Check for secrets\par        uses: trufflesecurity/trufflehog@main\par        with:\par          path: ./\par          base: ${{ github.event.repository.default_branch }}\par          \par  container-scan:\par    runs-on: ubuntu-latest\par    steps:\par      - uses: actions/checkout@v3\par      \par      - name: Build Docker image\par        run: docker build -t aws-s3-manager:scan .\par        \par      - name: Run Trivy vulnerability scanner\par        uses: aquasecurity/trivy-action@master\par        with:\par          image-ref: 'aws-s3-manager:scan'\par          format: 'sarif'\par          output: 'trivy-results.sarif'\par          severity: 'CRITICAL,HIGH'\par          \par      - name: Upload Trivy scan results to GitHub Security\par        uses: github/codeql-action/upload-sarif@v2\par        with:\par          sarif_file: 'trivy-results.sarif'\par          \par  sast:\par    runs-on: ubuntu-latest\par    steps:\par      - uses: actions/checkout@v3\par      \par      - name: Run Semgrep\par        uses: returntocorp/semgrep-action@v1\par        with:\par          config: >-\par            p/security-audit\par            p/typescript\par            p/javascript\par            p/nodejs\par\f0`\f1 \par\par\b 2. Secrets Management:\b0\par\f0`\f1 typescript\par// lib/secrets/manager.ts\parimport { SecretsManagerClient, GetSecretValueCommand } from '@aws-sdk/client-secrets-manager';\parimport { cache } from '@/lib/cache';\par\parclass SecretsManager {\par  private client: SecretsManagerClient;\par  private cache: Map<string, { value: string; expiry: number }> = new Map();\par  \par  constructor() {\par    this.client = new SecretsManagerClient({\par      region: process.env.AWS_REGION\par    });\par  }\par  \par  async getSecret(secretName: string): Promise<string> {\par    // Check cache first\par    const cached = this.cache.get(secretName);\par    if (cached && cached.expiry > Date.now()) {\par      return cached.value;\par    }\par    \par    try {\par      const command = new GetSecretValueCommand({\par        SecretId: secretName,\par        VersionStage: 'AWSCURRENT'\par      });\par      \par      const response = await this.client.send(command);\par      const secret = response.SecretString || '';\par      \par      // Cache for 5 minutes\par      this.cache.set(secretName, {\par        value: secret,\par        expiry: Date.now() + 5 \i  60 \i0 1000\par      });\par      \par      return secret;\par    } catch (error) {\par      console.error('Failed to retrieve secret:', error);\par      throw new Error('Secret retrieval failed');\par    }\par  }\par  \par  async rotateSecret(secretName: string): Promise<void> {\par    // Implement secret rotation logic\par    this.cache.delete(secretName);\par  }\par}\par\parexport const secretsManager = new SecretsManager();\par\f0`\f1 \par\par---\par\par\page\par\b\fs32 10. Performances et Optimisations\b0\fs22\par\par\par\par\b\fs28 10.1 Optimisations Frontend\b0\fs22\par\par\par\par\b\fs24 10.1.1 Performance Metrics\b0\fs22\par\par\par\b Core Web Vitals atteints:\b0\par- LCP (Largest Contentful Paint): < 2.5s\par- FID (First Input Delay): < 100ms\par- CLS (Cumulative Layout Shift): < 0.1\par- FCP (First Contentful Paint): < 1.8s\par- TTI (Time to Interactive): < 3.8s\par\par\par\b\fs24 10.1.2 Techniques d'Optimisation\b0\fs22\par\par\par\b 1. Code Splitting et Lazy Loading:\b0\par\f0`\f1 typescript\par// Lazy loading des composants lourds\parconst DashboardCharts = dynamic(\par  () => import('@/components/dashboard/Charts'),\par  {\par    loading: () => <ChartSkeleton />,\par    ssr: false\par  }\par);\par\par// Route-based code splitting automatique avec Next.js\par// Chaque page est un chunk séparé\par\f0`\f1 \par\par\b 2. Image Optimization:\b0\par\f0`\f1 tsx\parimport Image from 'next/image';\par\parexport function OptimizedImage({ src, alt, ...props }) {\par  return (\par    <Image\par      src={src}\par      alt={alt}\par      loading="lazy"\par      placeholder="blur"\par      blurDataURL={generateBlurDataURL(src)}\par      sizes="(max-width: 768px) 100vw,\par             (max-width: 1200px) 50vw,\par             33vw"\par      {...props}\par    />\par  );\par}\par\f0`\f1 \par\par\b 3. Caching Strategy:\b0\par\f0`\f1 typescript\par// SWR pour le cache côté client\parimport useSWR from 'swr';\par\parconst fetcher = async (url: string) => {\par  const res = await fetch(url);\par  if (!res.ok) throw new Error('Failed to fetch');\par  return res.json();\par};\par\parexport function useFiles() {\par  const { data, error, mutate } = useSWR('/api/list', fetcher, {\par    revalidateOnFocus: false,\par    revalidateOnReconnect: false,\par    refreshInterval: 30000, // 30 seconds\par    dedupingInterval: 10000,\par    shouldRetryOnError: true,\par    errorRetryCount: 3\par  });\par  \par  return {\par    files: data,\par    isLoading: !error && !data,\par    isError: error,\par    mutate\par  };\par}\par\f0`\f1 \par\par\par\b\fs28 10.2 Optimisations Backend\b0\fs22\par\par\par\par\b\fs24 10.2.1 Database Optimizations\b0\fs22\par\par\par\b 1. Connection Pooling:\b0\par\f0`\f1 typescript\par// lib/db/pool.ts\parimport { Pool } from 'pg';\par\parconst pool = new Pool({\par  host: process.env.DB_HOST,\par  port: parseInt(process.env.DB_PORT || '5432'),\par  database: process.env.DB_NAME,\par  user: process.env.DB_USER,\par  password: process.env.DB_PASSWORD,\par  max: 20, // Maximum de connexions\par  idleTimeoutMillis: 30000,\par  connectionTimeoutMillis: 2000,\par  statement_timeout: 10000,\par  query_timeout: 10000\par});\par\parpool.on('error', (err) => {\par  console.error('Unexpected error on idle client', err);\par});\par\parexport default pool;\par\f0`\f1 \par\par\b 2. Query Optimization:\b0\par\f0`\f1 sql\par-- Index pour améliorer les performances\parCREATE INDEX idx_files_user_id ON files(user_id);\parCREATE INDEX idx_files_created_at ON files(created_at DESC);\parCREATE INDEX idx_files_bucket_key ON files(bucket_name, file_key);\par\par-- Requête optimisée avec pagination\parCREATE OR REPLACE FUNCTION get_user_files(\par  p_user_id UUID,\par  p_limit INT DEFAULT 20,\par  p_offset INT DEFAULT 0\par)\parRETURNS TABLE (\par  file_id UUID,\par  file_key VARCHAR,\par  file_size BIGINT,\par  mime_type VARCHAR,\par  created_at TIMESTAMP,\par  total_count BIGINT\par) AS $$\parBEGIN\par  RETURN QUERY\par  WITH file_count AS (\par    SELECT COUNT(*) AS total\par    FROM files\par    WHERE user_id = p_user_id\par  )\par  SELECT \par    f.file_id,\par    f.file_key,\par    f.file_size,\par    f.mime_type,\par    f.created_at,\par    fc.total\par  FROM files f\par  CROSS JOIN file_count fc\par  WHERE f.user_id = p_user_id\par  ORDER BY f.created_at DESC\par  LIMIT p_limit\par  OFFSET p_offset;\parEND;\par$$ LANGUAGE plpgsql;\par\f0`\f1 \par\par\par\b\fs24 10.2.2 API Optimizations\b0\fs22\par\par\par\b 1. Response Compression:\b0\par\f0`\f1 typescript\par// middleware/compression.ts\parimport { NextRequest, NextResponse } from 'next/server';\parimport { compress } from 'zlib';\parimport { promisify } from 'util';\par\parconst gzip = promisify(compress);\par\parexport async function compressionMiddleware(\par  request: NextRequest,\par  response: NextResponse\par) {\par  const acceptEncoding = request.headers.get('accept-encoding') || '';\par  \par  if (acceptEncoding.includes('gzip')) {\par    const originalBody = await response.text();\par    const compressedBody = await gzip(Buffer.from(originalBody));\par    \par    return new NextResponse(compressedBody, {\par      status: response.status,\par      statusText: response.statusText,\par      headers: {\par        ...response.headers,\par        'content-encoding': 'gzip',\par        'content-length': compressedBody.length.toString()\par      }\par    });\par  }\par  \par  return response;\par}\par\f0`\f1 \par\par\b 2. Parallel Processing:\b0\par\f0`\f1 typescript\par// lib/aws/batchOperations.ts\parimport { S3Client } from '@aws-sdk/client-s3';\parimport pLimit from 'p-limit';\par\parconst limit = pLimit(5); // Limite à 5 opérations parallèles\par\parexport async function batchDeleteFiles(keys: string[]) {\par  const results = await Promise.allSettled(\par    keys.map(key => \par      limit(() => deleteFile(key))\par    )\par  );\par  \par  const successful = results.filter(r => r.status === 'fulfilled');\par  const failed = results.filter(r => r.status === 'rejected');\par  \par  return {\par    successful: successful.length,\par    failed: failed.length,\par    errors: failed.map(f => f.reason)\par  };\par}\par\f0`\f1 \par\par\par\b\fs28 10.3 Optimisations Infrastructure\b0\fs22\par\par\par\par\b\fs24 10.3.1 Kubernetes Resources\b0\fs22\par\par\par\b 1. Resource Requests et Limits optimisés:\b0\par\f0`\f1 yaml\parresources:\par  requests:\par    memory: "256Mi"  # Basé sur l'utilisation réelle moyenne\par    cpu: "250m"      # 1/4 CPU\par  limits:\par    memory: "1Gi"    # 4x les requests pour gérer les pics\par    cpu: "1000m"     # 1 CPU complet maximum\par\f0`\f1 \par\par\b 2. Horizontal Pod Autoscaler avec métriques custom:\b0\par\f0`\f1 yaml\parapiVersion: autoscaling/v2\parkind: HorizontalPodAutoscaler\parmetadata:\par  name: aws-s3-manager-hpa\parspec:\par  scaleTargetRef:\par    apiVersion: apps/v1\par    kind: Deployment\par    name: aws-s3-manager\par  minReplicas: 3\par  maxReplicas: 10\par  metrics:\par  - type: Resource\par    resource:\par      name: cpu\par      target:\par        type: Utilization\par        averageUtilization: 70\par  - type: Resource\par    resource:\par      name: memory\par      target:\par        type: Utilization\par        averageUtilization: 80\par  - type: Pods\par    pods:\par      metric:\par        name: http_requests_per_second\par      target:\par        type: AverageValue\par        averageValue: "1000"\par\f0`\f1 \par\par\par\b\fs24 10.3.2 CDN et Caching\b0\fs22\par\par\par\b CloudFront Configuration:\b0\par\f0`\f1 terraform\parresource "aws_cloudfront_distribution" "s3_distribution" {\par  origin {\par    domain_name = aws_s3_bucket.main.bucket_regional_domain_name\par    origin_id   = "S3-${aws_s3_bucket.main.id}"\par    \par    s3_origin_config {\par      origin_access_identity = aws_cloudfront_origin_access_identity.oai.cloudfront_access_identity_path\par    }\par  }\par  \par  enabled             = true\par  is_ipv6_enabled     = true\par  default_root_object = "index.html"\par  \par  default_cache_behavior {\par    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]\par    cached_methods   = ["GET", "HEAD", "OPTIONS"]\par    target_origin_id = "S3-${aws_s3_bucket.main.id}"\par    \par    forwarded_values {\par      query_string = true\par      headers      = ["Origin", "Access-Control-Request-Headers", "Access-Control-Request-Method"]\par      \par      cookies {\par        forward = "none"\par      }\par    }\par    \par    viewer_protocol_policy = "redirect-to-https"\par    min_ttl                = 0\par    default_ttl            = 3600\par    max_ttl                = 86400\par    compress               = true\par  }\par  \par  price_class = "PriceClass_100"\par  \par  restrictions {\par    geo_restriction {\par      restriction_type = "none"\par    }\par  }\par  \par  viewer_certificate {\par    cloudfront_default_certificate = true\par  }\par}\par\f0`\f1 \par\par---\par\par\page\par\b\fs32 11. Monitoring et Observabilité\b0\fs22\par\par\par\par\b\fs28 11.1 Stack de Monitoring\b0\fs22\par\par\par\par\b\fs24 11.1.1 Métriques et Logs\b0\fs22\par\par\par\b 1. Prometheus Configuration:\b0\par\f0`\f1 yaml\parapiVersion: v1\parkind: ConfigMap\parmetadata:\par  name: prometheus-config\par  namespace: monitoring\pardata:\par  prometheus.yml: |\par    global:\par      scrape_interval: 15s\par      evaluation_interval: 15s\par    \par    scrape_configs:\par    - job_name: 'kubernetes-pods'\par      kubernetes_sd_configs:\par      - role: pod\par      relabel_configs:\par      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\par        action: keep\par        regex: true\par      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\par        action: replace\par        target_label: __metrics_path__\par        regex: (.+)\par      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\par        action: replace\par        regex: ([^:]+)(?::\d+)?;(\d+)\par        replacement: $1:$2\par        target_label: __address__\par    \par    - job_name: 'aws-s3-manager'\par      static_configs:\par      - targets: ['aws-s3-manager-service:3000']\par      metrics_path: '/api/metrics'\par\f0`\f1 \par\par\b 2. Application Metrics:\b0\par\f0`\f1 typescript\par// lib/metrics/prometheus.ts\parimport { Registry, Counter, Histogram, Gauge } from 'prom-client';\par\parconst register = new Registry();\par\par// Métriques personnalisées\parexport const httpRequestDuration = new Histogram({\par  name: 's3_manager_http_request_duration_seconds',\par  help: 'Duration of HTTP requests in seconds',\par  labelNames: ['method', 'route', 'status_code'],\par  buckets: [0.1, 0.5, 1, 2, 5],\par  registers: [register]\par});\par\parexport const s3Operations = new Counter({\par  name: 's3_manager_operations_total',\par  help: 'Total number of S3 operations',\par  labelNames: ['operation', 'status'],\par  registers: [register]\par});\par\parexport const activeUsers = new Gauge({\par  name: 's3_manager_active_users',\par  help: 'Number of active users',\par  registers: [register]\par});\par\parexport const fileUploadSize = new Histogram({\par  name: 's3_manager_file_upload_size_bytes',\par  help: 'Size of uploaded files in bytes',\par  buckets: [1e3, 1e4, 1e5, 1e6, 1e7, 1e8], // 1KB to 100MB\par  registers: [register]\par});\par\par// Middleware pour mesurer les requêtes\parexport function metricsMiddleware(req: Request, res: Response, next: NextFunction) {\par  const start = Date.now();\par  \par  res.on('finish', () => {\par    const duration = (Date.now() - start) / 1000;\par    httpRequestDuration\par      .labels(req.method, req.route.path, res.statusCode.toString())\par      .observe(duration);\par  });\par  \par  next();\par}\par\f0`\f1 \par\par\par\b\fs24 11.1.2 Distributed Tracing\b0\fs22\par\par\par\b OpenTelemetry Integration:\b0\par\f0`\f1 typescript\par// lib/tracing/setup.ts\parimport { NodeSDK } from '@opentelemetry/sdk-node';\parimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\parimport { JaegerExporter } from '@opentelemetry/exporter-jaeger';\parimport { Resource } from '@opentelemetry/resources';\parimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\par\parconst jaegerExporter = new JaegerExporter({\par  endpoint: 'http://jaeger-collector:14268/api/traces',\par});\par\parconst sdk = new NodeSDK({\par  resource: new Resource({\par    [SemanticResourceAttributes.SERVICE_NAME]: 'aws-s3-manager',\par    [SemanticResourceAttributes.SERVICE_VERSION]: process.env.APP_VERSION || '1.0.0',\par  }),\par  traceExporter: jaegerExporter,\par  instrumentations: [\par    getNodeAutoInstrumentations({\par      '@opentelemetry/instrumentation-fs': {\par        enabled: false,\par      },\par    }),\par  ],\par});\par\parsdk.start();\par\f0`\f1 \par\par\par\b\fs24 11.1.3 Dashboards et Alertes\b0\fs22\par\par\par\b Grafana Dashboard JSON:\b0\par\f0`\f1 json\par{\par  "dashboard": {\par    "title": "AWS S3 Manager Dashboard",\par    "panels": [\par      {\par        "title": "Request Rate",\par        "targets": [\par          {\par            "expr": "rate(s3_manager_http_request_duration_seconds_count[5m])",\par            "legendFormat": "{{method}} {{route}}"\par          }\par        ],\par        "type": "graph"\par      },\par      {\par        "title": "Error Rate",\par        "targets": [\par          {\par            "expr": "rate(s3_manager_http_request_duration_seconds_count{status_code=~\"5..\"}[5m])",\par            "legendFormat": "5xx Errors"\par          }\par        ],\par        "type": "graph"\par      },\par      {\par        "title": "S3 Operations",\par        "targets": [\par          {\par            "expr": "rate(s3_manager_operations_total[5m])",\par            "legendFormat": "{{operation}} - {{status}}"\par          }\par        ],\par        "type": "graph"\par      },\par      {\par        "title": "Active Users",\par        "targets": [\par          {\par            "expr": "s3_manager_active_users",\par            "legendFormat": "Active Users"\par          }\par        ],\par        "type": "stat"\par      }\par    ]\par  }\par}\par\f0`\f1 \par\par\b AlertManager Rules:\b0\par\f0`\f1 yaml\pargroups:\par- name: aws-s3-manager\par  interval: 30s\par  rules:\par  - alert: HighErrorRate\par    expr: rate(s3_manager_http_request_duration_seconds_count{status_code=~"5.."}[5m]) > 0.05\par    for: 5m\par    labels:\par      severity: critical\par      team: platform\par    annotations:\par      summary: "High error rate detected"\par      description: "Error rate is above 5% for the last 5 minutes"\par      \par  - alert: S3OperationFailures\par    expr: rate(s3_manager_operations_total{status="error"}[5m]) > 0.1\par    for: 5m\par    labels:\par      severity: warning\par      team: platform\par    annotations:\par      summary: "S3 operations failing"\par      description: "S3 operation failure rate is above 10%"\par      \par  - alert: HighMemoryUsage\par    expr: container_memory_usage_bytes{pod=~"aws-s3-manager-.*"} / container_spec_memory_limit_bytes > 0.9\par    for: 5m\par    labels:\par      severity: warning\par      team: platform\par    annotations:\par      summary: "High memory usage"\par      description: "Pod {{ $labels.pod }} memory usage is above 90%"\par\f0`\f1 \par\par---\par\par\page\par\b\fs32 12. Défis Rencontrés et Solutions\b0\fs22\par\par\par\par\b\fs28 12.1 Défis Techniques\b0\fs22\par\par\par\par\b\fs24 12.1.1 Gestion des Uploads Volumineux\b0\fs22\par\par\par\b Problème:\b0 Les uploads de fichiers > 100MB causaient des timeouts et des échecs.\par\par\b Solution Implementée:\b0\par\f0`\f1 typescript\par// Multipart upload pour les gros fichiers\parimport { \par  CreateMultipartUploadCommand,\par  UploadPartCommand,\par  CompleteMultipartUploadCommand,\par  AbortMultipartUploadCommand\par} from '@aws-sdk/client-s3';\par\parexport async function uploadLargeFile(\par  file: File,\par  onProgress: (progress: number) => void\par) {\par  const CHUNK_SIZE = 10 \i  1024 \i0 1024; // 10MB chunks\par  const chunks = Math.ceil(file.size / CHUNK_SIZE);\par  \par  // Initier l'upload multipart\par  const multipartUpload = await s3Client.send(\par    new CreateMultipartUploadCommand({\par      Bucket: BUCKET_NAME,\par      Key: file.name\par    })\par  );\par  \par  const uploadId = multipartUpload.UploadId;\par  const uploadPromises = [];\par  \par  try {\par    for (let i = 0; i < chunks; i++) {\par      const start = i * CHUNK_SIZE;\par      const end = Math.min(start + CHUNK_SIZE, file.size);\par      const chunk = file.slice(start, end);\par      \par      const uploadPromise = s3Client.send(\par        new UploadPartCommand({\par          Bucket: BUCKET_NAME,\par          Key: file.name,\par          UploadId: uploadId,\par          PartNumber: i + 1,\par          Body: chunk\par        })\par      ).then(data => {\par        const progress = ((i + 1) / chunks) * 100;\par        onProgress(progress);\par        return { ETag: data.ETag, PartNumber: i + 1 };\par      });\par      \par      uploadPromises.push(uploadPromise);\par    }\par    \par    const uploadedParts = await Promise.all(uploadPromises);\par    \par    // Compléter l'upload\par    await s3Client.send(\par      new CompleteMultipartUploadCommand({\par        Bucket: BUCKET_NAME,\par        Key: file.name,\par        UploadId: uploadId,\par        MultipartUpload: { Parts: uploadedParts }\par      })\par    );\par    \par  } catch (error) {\par    // Annuler l'upload en cas d'erreur\par    await s3Client.send(\par      new AbortMultipartUploadCommand({\par        Bucket: BUCKET_NAME,\par        Key: file.name,\par        UploadId: uploadId\par      })\par    );\par    throw error;\par  }\par}\par\f0`\f1 \par\par\par\b\fs24 12.1.2 Performance des Requêtes Base de Données\b0\fs22\par\par\par\b Problème:\b0 Requêtes lentes lors de la récupération de milliers de fichiers.\par\par\b Solution:\b0 Implémentation de la pagination côté serveur avec curseurs.\par\par\f0`\f1 typescript\par// Pagination avec curseur pour de meilleures performances\parexport async function getFilesPaginated(\par  userId: string,\par  cursor?: string,\par  limit: number = 20\par) {\par  const query = \f0\par    SELECT \par      file_id,\par      file_key,\par      file_size,\par      mime_type,\par      created_at,\par      COUNT(*) OVER() as total_count\par    FROM files\par    WHERE user_id = $1\par      AND ($2::timestamp IS NULL OR created_at < $2)\par    ORDER BY created_at DESC\par    LIMIT $3\par  \f1 ;\par  \par  const values = [userId, cursor || null, limit];\par  const result = await pool.query(query, values);\par  \par  const files = result.rows;\par  const hasMore = files.length === limit;\par  const nextCursor = hasMore ? files[files.length - 1].created_at : null;\par  \par  return {\par    files,\par    totalCount: files[0]?.total_count || 0,\par    hasMore,\par    nextCursor\par  };\par}\par\f0`\f1 \par\par\par\b\fs24 12.1.3 Gestion des Pics de Charge\b0\fs22\par\par\par\b Problème:\b0 L'application subissait des ralentissements lors de pics d'utilisation.\par\par\b Solution:\b0 Mise en place d'une architecture résiliente avec queue et cache.\par\par\f0`\f1 typescript\par// Circuit breaker pattern\parclass CircuitBreaker {\par  private failures = 0;\par  private lastFailureTime = 0;\par  private state: 'CLOSED' | 'OPEN' | 'HALF_OPEN' = 'CLOSED';\par  \par  constructor(\par    private threshold = 5,\par    private timeout = 60000 // 1 minute\par  ) {}\par  \par  async execute<T>(operation: () => Promise<T>): Promise<T> {\par    if (this.state === 'OPEN') {\par      if (Date.now() - this.lastFailureTime > this.timeout) {\par        this.state = 'HALF_OPEN';\par      } else {\par        throw new Error('Circuit breaker is OPEN');\par      }\par    }\par    \par    try {\par      const result = await operation();\par      this.onSuccess();\par      return result;\par    } catch (error) {\par      this.onFailure();\par      throw error;\par    }\par  }\par  \par  private onSuccess() {\par    this.failures = 0;\par    this.state = 'CLOSED';\par  }\par  \par  private onFailure() {\par    this.failures++;\par    this.lastFailureTime = Date.now();\par    \par    if (this.failures >= this.threshold) {\par      this.state = 'OPEN';\par    }\par  }\par}\par\par// Utilisation avec Redis cache\parconst s3Breaker = new CircuitBreaker();\parconst redisClient = createClient({ url: process.env.REDIS_URL });\par\parexport async function listFilesWithFallback(userId: string) {\par  const cacheKey = \f0files:${userId}\f1 ;\par  \par  try {\par    // Essayer le cache d'abord\par    const cached = await redisClient.get(cacheKey);\par    if (cached) {\par      return JSON.parse(cached);\par    }\par    \par    // Si pas de cache, utiliser S3 avec circuit breaker\par    const files = await s3Breaker.execute(async () => {\par      return await listS3Files(userId);\par    });\par    \par    // Mettre en cache pour 5 minutes\par    await redisClient.setex(cacheKey, 300, JSON.stringify(files));\par    \par    return files;\par  } catch (error) {\par    // Fallback vers la base de données locale\par    console.error('S3 list failed, falling back to database', error);\par    return await getFilesFromDatabase(userId);\par  }\par}\par\f0`\f1 \par\par\par\b\fs28 12.2 Défis Organisationnels\b0\fs22\par\par\par\par\b\fs24 12.2.1 Coordination Multi-Équipes\b0\fs22\par\par\par\b Défi:\b0 Coordination entre les équipes dev, ops et sécurité.\par\par\b Solution:\b0 Mise en place de pratiques DevOps avec ownership partagé.\par\par- Daily standups cross-fonctionnels\par- Documentation as Code\par- Revues de code obligatoires\par- Runbooks automatisés\par\par\par\b\fs24 12.2.2 Migration Progressive\b0\fs22\par\par\par\b Défi:\b0 Migration de l'ancienne solution sans interruption de service.\par\par\b Solution:\b0 Stratégie de migration Blue/Green avec feature flags.\par\par\f0`\f1 typescript\par// Feature flags pour migration progressive\parimport { FeatureFlag } from '@/lib/featureFlags';\par\parconst flags = new FeatureFlag({\par  newUploadFlow: {\par    enabled: process.env.ENABLE_NEW_UPLOAD === 'true',\par    rolloutPercentage: 50\par  },\par  enhancedNotifications: {\par    enabled: true,\par    rolloutPercentage: 100\par  }\par});\par\parexport async function handleUpload(req: Request) {\par  const userId = req.user.id;\par  \par  if (await flags.isEnabled('newUploadFlow', userId)) {\par    return newUploadHandler(req);\par  } else {\par    return legacyUploadHandler(req);\par  }\par}\par\f0`\f1 \par\par---\par\par\page\par\b\fs32 13. Résultats et Métriques\b0\fs22\par\par\par\par\b\fs28 13.1 Métriques de Performance\b0\fs22\par\par\par\par\b\fs24 13.1.1 Amélioration des Temps de Réponse\b0\fs22\par\par\par\b Avant vs Après:\b0\par- Upload de fichier (10MB): 15s → 3s (-80%)\par- Liste des fichiers (1000 items): 5s → 0.8s (-84%)\par- Recherche de fichiers: 3s → 0.2s (-93%)\par- Dashboard loading: 4s → 1.2s (-70%)\par\par\par\b\fs24 13.1.2 Disponibilité et Fiabilité\b0\fs22\par\par\par\b SLA Atteints:\b0\par- Disponibilité: 99.95% (objectif: 99.9%)\par- MTTR (Mean Time To Recovery): 5 minutes\par- MTBF (Mean Time Between Failures): 45 jours\par- Error Rate: < 0.1%\par\par\par\b\fs28 13.2 Métriques Business\b0\fs22\par\par\par\par\b\fs24 13.2.1 Adoption Utilisateur\b0\fs22\par\par\par\f0`\f1 \parMois 1: 50 utilisateurs actifs\parMois 2: 200 utilisateurs actifs\parMois 3: 500 utilisateurs actifs\parMois 6: 1,200 utilisateurs actifs\par\parTaux d'adoption: 95% des utilisateurs cibles\par\f0`\f1 \par\par\par\b\fs24 13.2.2 Impact Opérationnel\b0\fs22\par\par\par- \b Réduction du temps de gestion:\b0 40% de gain de productivité\par- \b Diminution des erreurs:\b0 75% moins d'erreurs de manipulation\par- \b Satisfaction utilisateur:\b0 NPS de 72 (excellent)\par- \b Coût par utilisateur:\b0 Réduit de 60%\par\par\par\b\fs28 13.3 Métriques Techniques\b0\fs22\par\par\par\par\b\fs24 13.3.1 Infrastructure\b0\fs22\par\par\par\b Utilisation des Ressources:\b0\par\f0`\f1 yaml\parKubernetes Cluster:\par  - CPU Utilization: 45% average, 70% peak\par  - Memory Utilization: 60% average, 80% peak\par  - Pod Density: 15 pods/node\par  - Network Throughput: 100 Mbps average\par\parAWS Resources:\par  - S3 Storage: 2.5 TB\par  - S3 Requests: 1M/month\par  - RDS Storage: 50 GB\par  - Data Transfer: 500 GB/month\par\f0`\f1 \par\par\par\b\fs24 13.3.2 CI/CD Pipeline\b0\fs22\par\par\par\b Pipeline Metrics:\b0\par- Build Success Rate: 98%\par- Average Build Time: 8 minutes\par- Deployment Frequency: 15/week\par- Lead Time for Changes: 2 hours\par- MTTR for Pipeline: 10 minutes\par\par---\par\par\page\par\b\fs32 14. Perspectives d'Évolution\b0\fs22\par\par\par\par\b\fs28 14.1 Roadmap Technique\b0\fs22\par\par\par\par\b\fs24 14.1.1 Court Terme (Q1 2025)\b0\fs22\par\par\par1. \b Migration vers Service Mesh (Istio)\b0\par   - Amélioration de l'observabilité\par   - Gestion du trafic avancée\par   - Security policies centralisées\par\par2. \b Implémentation de GraphQL\b0\par   - API plus flexible\par   - Réduction du over-fetching\par   - Subscriptions temps réel\par\par3. \b Edge Computing avec CloudFront Functions\b0\par   - Validation côté edge\par   - Routing intelligent\par   - Réduction de latence\par\par\par\b\fs24 14.1.2 Moyen Terme (Q2-Q3 2025)\b0\fs22\par\par\par1. \b Machine Learning Integration\b0\par   - Classification automatique des fichiers\par   - Détection d'anomalies\par   - Prédiction d'utilisation du stockage\par\par2. \b Multi-Cloud Strategy\b0\par   - Support Azure Blob Storage\par   - Google Cloud Storage integration\par   - Abstraction de stockage unifié\par\par3. \b Blockchain pour Audit Trail\b0\par   - Immutabilité des logs\par   - Traçabilité complète\par   - Smart contracts pour workflows\par\par\par\b\fs24 14.1.3 Long Terme (2026)\b0\fs22\par\par\par1. \b Serverless Migration\b0\par   - AWS Lambda pour le processing\par   - Fargate pour les containers\par   - Réduction des coûts d'infrastructure\par\par2. \b AI-Powered Features\b0\par   - Recherche sémantique\par   - Génération automatique de métadonnées\par   - Assistant virtuel intégré\par\par\par\b\fs28 14.2 Améliorations Planifiées\b0\fs22\par\par\par\par\b\fs24 14.2.1 Sécurité Renforcée\b0\fs22\par\par\par\f0`\f1 typescript\par// Future: Zero Trust Architecture\parinterface ZeroTrustPolicy {\par  user: AuthenticatedUser;\par  device: DeviceInfo;\par  location: GeoLocation;\par  riskScore: number;\par  \par  evaluate(): Promise<AccessDecision>;\par}\par\parclass AdaptiveAuthentication {\par  async authenticate(request: AuthRequest): Promise<AuthResult> {\par    const riskScore = await this.calculateRiskScore(request);\par    \par    if (riskScore > 0.8) {\par      return this.requireMFA(request);\par    } else if (riskScore > 0.5) {\par      return this.requireAdditionalVerification(request);\par    }\par    \par    return this.standardAuth(request);\par  }\par}\par\f0`\f1 \par\par\par\b\fs24 14.2.2 Performance Optimization\b0\fs22\par\par\par\f0`\f1 yaml\par\page\par\b\fs32 Future: eBPF-based monitoring\b0\fs22\par\parapiVersion: v1\parkind: ConfigMap\parmetadata:\par  name: ebpf-monitor\pardata:\par  monitor.c: |\par    #include <linux/bpf.h>\par    #include <linux/ptrace.h>\par    \par    SEC("kprobe/tcp_sendmsg")\par    int trace_tcp_sendmsg(struct pt_regs *ctx) {\par        // Trace network calls at kernel level\par        // Ultra-low overhead monitoring\par    }\par\f0`\f1 \par\par---\par\par\page\par\b\fs32 15. Conclusion\b0\fs22\par\par\par\par\b\fs28 15.1 Bilan du Projet\b0\fs22\par\par\parCe projet représente une transformation majeure dans notre approche de la gestion des données cloud. L'implémentation réussie de cette solution a démontré plusieurs points clés :\par\par\par\b\fs24 15.1.1 Réussites Techniques\b0\fs22\par\par\par1. \b Architecture Cloud-Native:\b0 L'adoption de Kubernetes et des principes cloud-native a permis une scalabilité et une résilience exceptionnelles.\par\par2. \b DevOps Excellence:\b0 Le pipeline CI/CD automatisé a réduit drastiquement le time-to-market tout en améliorant la qualité.\par\par3. \b Stack Technologique Moderne:\b0 L'utilisation de Next.js, AWS, et des meilleures pratiques actuelles garantit la pérennité de la solution.\par\par\par\b\fs24 15.1.2 Impact Business\b0\fs22\par\par\parL'impact sur l'organisation a dépassé les attentes initiales :\par- ROI positif atteint en 4 mois\par- Adoption par 95% des utilisateurs cibles\par- Réduction de 40% des coûts opérationnels\par- Amélioration significative de la satisfaction utilisateur\par\par\par\b\fs24 15.1.3 Leçons Apprises\b0\fs22\par\par\par1. \b L'importance de l'automatisation:\b0 Chaque processus manuel éliminé représente un gain en fiabilité et en efficacité.\par\par2. \b La valeur de l'observabilité:\b0 Les investissements dans le monitoring et le tracing ont payé lors de la résolution d'incidents.\par\par3. \b L'adoption progressive:\b0 Les feature flags et la migration progressive ont minimisé les risques.\par\par\par\b\fs28 15.2 Remerciements\b0\fs22\par\par\parCe projet n'aurait pas été possible sans :\par- L'équipe de développement pour leur expertise technique\par- L'équipe DevOps pour l'infrastructure robuste\par- Les utilisateurs beta pour leurs retours constructifs\par- Le management pour leur support continu\par\par\par\b\fs28 15.3 Vision Future\b0\fs22\par\par\parCe projet pose les fondations pour une transformation digitale plus large. Les prochaines étapes incluront :\par- Extension à d'autres services cloud\par- Intelligence artificielle pour l'automatisation\par- Expansion internationale de la plateforme\par\parLa réussite de ce projet démontre notre capacité à livrer des solutions innovantes qui apportent une vraie valeur ajoutée à l'organisation.\par\par---\par\par\page\par\b\fs32 16. Annexes\b0\fs22\par\par\par\par\b\fs28 Annexe A: Configuration Détaillée\b0\fs22\par\par\par\par\b\fs24 A.1 Configuration Docker Production\b0\fs22\par\par\par\f0`\f1 dockerfile\par\page\par\b\fs32 Dockerfile optimisé multi-stage\b0\fs22\par\parFROM node:18-alpine AS deps\parRUN apk add --no-cache libc6-compat\parWORKDIR /app\parCOPY package.json package-lock.json ./\parRUN npm ci --only=production\par\parFROM node:18-alpine AS builder\parWORKDIR /app\parCOPY package.json package-lock.json ./\parRUN npm ci\parCOPY . .\parRUN npm run build\par\parFROM node:18-alpine AS runner\parWORKDIR /app\par\parENV NODE_ENV production\parENV NEXT_TELEMETRY_DISABLED 1\par\parRUN addgroup --system --gid 1001 nodejs\parRUN adduser --system --uid 1001 nextjs\par\parCOPY --from=builder /app/public ./public\parCOPY --from=builder /app/package.json ./package.json\par\parCOPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./\parCOPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static\par\parUSER nextjs\par\parEXPOSE 3000\par\parENV PORT 3000\par\parCMD ["node", "server.js"]\par\f0`\f1 \par\par\par\b\fs24 A.2 Script de Déploiement Automatisé\b0\fs22\par\par\par\f0`\f1 bash\par#!/bin/bash\par\page\par\b\fs32 deploy-production.sh\b0\fs22\par\par\parset -euo pipefail\par\par\page\par\b\fs32 Colors for output\b0\fs22\par\parRED='\033[0;31m'\parGREEN='\033[0;32m'\parYELLOW='\033[1;33m'\parNC='\033[0m'\par\parecho -e "${GREEN}Starting production deployment...${NC}"\par\par\page\par\b\fs32 Check prerequisites\b0\fs22\par\parcommand -v kubectl >/dev/null 2>&1 || { echo -e "${RED}kubectl is required but not installed.${NC}" >&2; exit 1; }\parcommand -v docker >/dev/null 2>&1 || { echo -e "${RED}docker is required but not installed.${NC}" >&2; exit 1; }\par\par\page\par\b\fs32 Variables\b0\fs22\par\parNAMESPACE="aws-s3-manager"\parAPP_NAME="aws-s3-manager"\parREGISTRY="registry.example.com"\parVERSION=$(git describe --tags --always)\par\par\page\par\b\fs32 Build and push Docker image\b0\fs22\par\parecho -e "${YELLOW}Building Docker image...${NC}"\pardocker build -t ${REGISTRY}/${APP_NAME}:${VERSION} .\pardocker tag ${REGISTRY}/${APP_NAME}:${VERSION} ${REGISTRY}/${APP_NAME}:latest\par\parecho -e "${YELLOW}Pushing Docker image...${NC}"\pardocker push ${REGISTRY}/${APP_NAME}:${VERSION}\pardocker push ${REGISTRY}/${APP_NAME}:latest\par\par\page\par\b\fs32 Update Kubernetes deployment\b0\fs22\par\parecho -e "${YELLOW}Updating Kubernetes deployment...${NC}"\parkubectl set image deployment/${APP_NAME} app=${REGISTRY}/${APP_NAME}:${VERSION} -n ${NAMESPACE}\par\par\page\par\b\fs32 Wait for rollout to complete\b0\fs22\par\parecho -e "${YELLOW}Waiting for rollout to complete...${NC}"\parkubectl rollout status deployment/${APP_NAME} -n ${NAMESPACE}\par\par\page\par\b\fs32 Run smoke tests\b0\fs22\par\parecho -e "${YELLOW}Running smoke tests...${NC}"\par./scripts/smoke-tests.sh\par\parecho -e "${GREEN}Deployment completed successfully!${NC}"\par\f0`\f1 \par\par\par\b\fs28 Annexe B: Métriques de Performance Détaillées\b0\fs22\par\par\par\par\b\fs24 B.1 Benchmarks de Performance\b0\fs22\par\par\par\f0`\f1 \parLoad Test Results (using K6):\par=================================\parScenario: 1000 concurrent users\parDuration: 30 minutes\parTarget: https://s3-manager.example.com\par\parResults:\par--------\par✓ http_req_duration..............: avg=156.23ms min=45ms med=142ms max=1.2s p(95)=289ms p(99)=456ms\par✓ http_req_failed................: 0.02%\par✓ http_req_receiving.............: avg=2.34ms min=0.5ms med=2.1ms max=15ms\par✓ http_req_sending...............: avg=0.89ms min=0.1ms med=0.8ms max=5ms\par✓ http_reqs......................: 384,291 total\par✓ vus............................: 1000\par✓ vus_max........................: 1000\par\parFile Upload Performance:\par-----------------------\par1MB file:    avg=0.8s  p(95)=1.2s  p(99)=1.5s\par10MB file:   avg=3.2s  p(95)=4.5s  p(99)=5.8s\par100MB file:  avg=28s   p(95)=35s   p(99)=42s\par\f0`\f1 \par\par\par\b\fs24 B.2 Analyse des Coûts AWS\b0\fs22\par\par\par\f0`\f1 \parMonthly AWS Cost Breakdown:\par==========================\parService               | Usage                  | Cost (USD)\par---------------------|------------------------|------------\parEC2 (K8s nodes)      | 3x t3.large           | $149.76\parRDS PostgreSQL       | db.t3.micro Multi-AZ  | $48.96\parS3 Storage           | 2.5TB + requests      | $57.50\parData Transfer        | 500GB                 | $45.00\parSNS/SQS             | 1M messages           | $0.50\parCloudWatch          | Logs + Metrics        | $25.00\parLoad Balancer       | Application LB        | $22.50\par---------------------|------------------------|------------\parTotal Monthly Cost   |                       | $349.22\par\parCost per User: $0.29/month (1200 active users)\par\f0`\f1 \par\par\par\b\fs28 Annexe C: Documentation API\b0\fs22\par\par\par\par\b\fs24 C.1 API Endpoints\b0\fs22\par\par\par\f0`\f1 typescript\par// API Documentation\parinterface APIEndpoints {\par  // Authentication\par  'POST /api/auth/login': {\par    body: { email: string; password: string };\par    response: { token: string; user: User };\par  };\par  \par  // File Operations\par  'GET /api/list': {\par    query: { prefix?: string; limit?: number; cursor?: string };\par    response: { files: S3File[]; nextCursor?: string };\par  };\par  \par  'POST /api/upload': {\par    body: FormData; // file + metadata\par    response: { file: S3File; uploadId: string };\par  };\par  \par  'DELETE /api/delete/:key': {\par    params: { key: string };\par    response: { success: boolean };\par  };\par  \par  // Notifications\par  'GET /api/notifications': {\par    query: { limit?: number; since?: string };\par    response: { notifications: Notification[] };\par  };\par  \par  'WS /api/notifications/ws': {\par    message: NotificationEvent;\par  };\par}\par\f0`\f1 \par\par\par\b\fs28 Annexe D: Procédures d'Urgence\b0\fs22\par\par\par\par\b\fs24 D.1 Runbook - Incident Response\b0\fs22\par\par\par\f0`\f1 markdown\par\page\par\b\fs32 Incident Response Runbook\b0\fs22\par\par\par\par\b\fs28 1. Identification\b0\fs22\par\par- Check monitoring dashboards\par- Verify alerts in Slack/PagerDuty\par- Assess severity (P1-P4)\par\par\par\b\fs28 2. Communication\b0\fs22\par\par- P1/P2: Create incident channel #incident-YYYY-MM-DD\par- Notify stakeholders via status page\par- Assign incident commander\par\par\par\b\fs28 3. Diagnosis\b0\fs22\par\par\f0`\f1 bash\par\page\par\b\fs32 Check application health\b0\fs22\par\parkubectl get pods -n aws-s3-manager\parkubectl describe pod <pod-name> -n aws-s3-manager\parkubectl logs <pod-name> -n aws-s3-manager --tail=100\par\par\page\par\b\fs32 Check AWS services\b0\fs22\par\paraws s3api list-buckets\paraws sns list-topics\paraws sqs list-queues\par\par\page\par\b\fs32 Database health\b0\fs22\par\parkubectl exec -it postgres-0 -n aws-s3-manager -- psql -U postgres -c "SELECT pg_is_in_recovery();"\par\f0`\f1 \par\par\par\b\fs28 4. Mitigation\b0\fs22\par\par- Scale up if needed: \f0kubectl scale deployment aws-s3-manager --replicas=5\f1 \par- Enable circuit breakers\par- Redirect traffic if necessary\par\par\par\b\fs28 5. Resolution\b0\fs22\par\par- Apply fix\par- Verify in staging first\par- Deploy to production\par- Monitor for 30 minutes\par\par\par\b\fs28 6. Post-Mortem\b0\fs22\par\par- Schedule within 48 hours\par- Document timeline\par- Identify root cause\par- Create action items\par\f0``\par\par---\par\par\b Fin du Rapport\b0\par\par\b Date de finalisation:\b0 Décembre 2024  \par\b Nombre de pages:\b0 30  \par\b Auteur:\b0 Équipe d'Ingénierie DevOps
}