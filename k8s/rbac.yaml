# ServiceAccount for the application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aws-s3-manager-sa
  namespace: aws-s3-manager
  labels:
    app: aws-s3-manager
---
# ServiceAccount for PostgreSQL
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres-sa
  namespace: aws-s3-manager
  labels:
    app: postgres
---
# Role for application pods - minimal permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: aws-s3-manager-role
  namespace: aws-s3-manager
rules:
# Allow reading configmaps for configuration
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
# Allow reading secrets for credentials
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
# Allow reading services for service discovery
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list"]
# Allow reading endpoints for service discovery
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get", "list", "watch"]
---
# RoleBinding for application
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: aws-s3-manager-rolebinding
  namespace: aws-s3-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: aws-s3-manager-role
subjects:
- kind: ServiceAccount
  name: aws-s3-manager-sa
  namespace: aws-s3-manager
---
# Role for PostgreSQL - minimal permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: postgres-role
  namespace: aws-s3-manager
rules:
# Allow reading configmaps for configuration
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
# Allow reading secrets for credentials
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
---
# RoleBinding for PostgreSQL
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: postgres-rolebinding
  namespace: aws-s3-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: postgres-role
subjects:
- kind: ServiceAccount
  name: postgres-sa
  namespace: aws-s3-manager
---
# ClusterRole for monitoring (if needed)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: aws-s3-manager-monitoring
rules:
# Allow reading metrics
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
---
# ClusterRoleBinding for monitoring (only in production)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aws-s3-manager-monitoring-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aws-s3-manager-monitoring
subjects:
- kind: ServiceAccount
  name: aws-s3-manager-sa
  namespace: aws-s3-manager