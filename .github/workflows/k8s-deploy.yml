name: Kubernetes Deployment

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  IMAGE_NAME: aws-s3-manager
  NAMESPACE: aws-s3-manager

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: üöÄ Build & Deploy to K8s
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test || echo "Tests not configured - continuing"
      
    - name: Build Docker image
      run: |
        IMAGE_TAG="v$(date +%Y%m%d-%H%M%S)"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        docker build -t $IMAGE_NAME:$IMAGE_TAG -t $IMAGE_NAME:latest .
        
    - name: Security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:latest
        format: 'table'
        severity: 'HIGH,CRITICAL'
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    # For self-hosted runners or local deployment
    - name: Deploy to Kubernetes
      run: |
        echo "üöÄ Deploying $IMAGE_NAME:$IMAGE_TAG to Kubernetes..."
        
        # Apply base configurations
        kubectl apply -f k8s/secret.yaml || echo "Secret already exists"
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/postgres-deployment.yaml
        kubectl apply -f k8s/app-deployment.yaml
        
        # Update deployment with new image
        kubectl set image deployment/aws-s3-manager-app aws-s3-manager=$IMAGE_NAME:$IMAGE_TAG -n $NAMESPACE
        
        # Wait for rollout
        kubectl rollout status deployment/aws-s3-manager-app -n $NAMESPACE --timeout=300s
        
        echo "‚úÖ Deployment completed successfully!"
        
    - name: Verify deployment
      run: |
        echo "üìä Deployment verification..."
        kubectl get pods -n $NAMESPACE
        kubectl get svc -n $NAMESPACE
        
        # Test application health
        echo "üè• Testing application health..."
        kubectl wait --for=condition=ready pod -l app=aws-s3-manager-app -n $NAMESPACE --timeout=60s || echo "Warning: Pods not ready"
        
    - name: Cleanup old images
      run: docker image prune -f